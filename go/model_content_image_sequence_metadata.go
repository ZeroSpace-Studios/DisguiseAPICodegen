/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContentImageSequenceMetadata struct for ContentImageSequenceMetadata
type ContentImageSequenceMetadata struct {
	ImageMetadata *ContentImageMetadata `json:"imageMetadata,omitempty"`
	Fps *float32 `json:"fps,omitempty"`
	NFrames *int64 `json:"nFrames,omitempty"`
}

// NewContentImageSequenceMetadata instantiates a new ContentImageSequenceMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentImageSequenceMetadata() *ContentImageSequenceMetadata {
	this := ContentImageSequenceMetadata{}
	return &this
}

// NewContentImageSequenceMetadataWithDefaults instantiates a new ContentImageSequenceMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentImageSequenceMetadataWithDefaults() *ContentImageSequenceMetadata {
	this := ContentImageSequenceMetadata{}
	return &this
}

// GetImageMetadata returns the ImageMetadata field value if set, zero value otherwise.
func (o *ContentImageSequenceMetadata) GetImageMetadata() ContentImageMetadata {
	if o == nil || o.ImageMetadata == nil {
		var ret ContentImageMetadata
		return ret
	}
	return *o.ImageMetadata
}

// GetImageMetadataOk returns a tuple with the ImageMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageSequenceMetadata) GetImageMetadataOk() (*ContentImageMetadata, bool) {
	if o == nil || o.ImageMetadata == nil {
		return nil, false
	}
	return o.ImageMetadata, true
}

// HasImageMetadata returns a boolean if a field has been set.
func (o *ContentImageSequenceMetadata) HasImageMetadata() bool {
	if o != nil && o.ImageMetadata != nil {
		return true
	}

	return false
}

// SetImageMetadata gets a reference to the given ContentImageMetadata and assigns it to the ImageMetadata field.
func (o *ContentImageSequenceMetadata) SetImageMetadata(v ContentImageMetadata) {
	o.ImageMetadata = &v
}

// GetFps returns the Fps field value if set, zero value otherwise.
func (o *ContentImageSequenceMetadata) GetFps() float32 {
	if o == nil || o.Fps == nil {
		var ret float32
		return ret
	}
	return *o.Fps
}

// GetFpsOk returns a tuple with the Fps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageSequenceMetadata) GetFpsOk() (*float32, bool) {
	if o == nil || o.Fps == nil {
		return nil, false
	}
	return o.Fps, true
}

// HasFps returns a boolean if a field has been set.
func (o *ContentImageSequenceMetadata) HasFps() bool {
	if o != nil && o.Fps != nil {
		return true
	}

	return false
}

// SetFps gets a reference to the given float32 and assigns it to the Fps field.
func (o *ContentImageSequenceMetadata) SetFps(v float32) {
	o.Fps = &v
}

// GetNFrames returns the NFrames field value if set, zero value otherwise.
func (o *ContentImageSequenceMetadata) GetNFrames() int64 {
	if o == nil || o.NFrames == nil {
		var ret int64
		return ret
	}
	return *o.NFrames
}

// GetNFramesOk returns a tuple with the NFrames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageSequenceMetadata) GetNFramesOk() (*int64, bool) {
	if o == nil || o.NFrames == nil {
		return nil, false
	}
	return o.NFrames, true
}

// HasNFrames returns a boolean if a field has been set.
func (o *ContentImageSequenceMetadata) HasNFrames() bool {
	if o != nil && o.NFrames != nil {
		return true
	}

	return false
}

// SetNFrames gets a reference to the given int64 and assigns it to the NFrames field.
func (o *ContentImageSequenceMetadata) SetNFrames(v int64) {
	o.NFrames = &v
}

func (o ContentImageSequenceMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageMetadata != nil {
		toSerialize["imageMetadata"] = o.ImageMetadata
	}
	if o.Fps != nil {
		toSerialize["fps"] = o.Fps
	}
	if o.NFrames != nil {
		toSerialize["nFrames"] = o.NFrames
	}
	return json.Marshal(toSerialize)
}

type NullableContentImageSequenceMetadata struct {
	value *ContentImageSequenceMetadata
	isSet bool
}

func (v NullableContentImageSequenceMetadata) Get() *ContentImageSequenceMetadata {
	return v.value
}

func (v *NullableContentImageSequenceMetadata) Set(val *ContentImageSequenceMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableContentImageSequenceMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableContentImageSequenceMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentImageSequenceMetadata(val *ContentImageSequenceMetadata) *NullableContentImageSequenceMetadata {
	return &NullableContentImageSequenceMetadata{value: val, isSet: true}
}

func (v NullableContentImageSequenceMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentImageSequenceMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


