/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportGotoNoteInfo struct for TransportGotoNoteInfo
type TransportGotoNoteInfo struct {
	Transport *D3apiLocator `json:"transport,omitempty"`
	Note *string `json:"note,omitempty"`
	Playmode *TransportAPIPlayMode `json:"playmode,omitempty"`
}

// NewTransportGotoNoteInfo instantiates a new TransportGotoNoteInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportGotoNoteInfo() *TransportGotoNoteInfo {
	this := TransportGotoNoteInfo{}
	var playmode TransportAPIPlayMode = NOT_SET
	this.Playmode = &playmode
	return &this
}

// NewTransportGotoNoteInfoWithDefaults instantiates a new TransportGotoNoteInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportGotoNoteInfoWithDefaults() *TransportGotoNoteInfo {
	this := TransportGotoNoteInfo{}
	var playmode TransportAPIPlayMode = NOT_SET
	this.Playmode = &playmode
	return &this
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *TransportGotoNoteInfo) GetTransport() D3apiLocator {
	if o == nil || o.Transport == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGotoNoteInfo) GetTransportOk() (*D3apiLocator, bool) {
	if o == nil || o.Transport == nil {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *TransportGotoNoteInfo) HasTransport() bool {
	if o != nil && o.Transport != nil {
		return true
	}

	return false
}

// SetTransport gets a reference to the given D3apiLocator and assigns it to the Transport field.
func (o *TransportGotoNoteInfo) SetTransport(v D3apiLocator) {
	o.Transport = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *TransportGotoNoteInfo) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGotoNoteInfo) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *TransportGotoNoteInfo) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *TransportGotoNoteInfo) SetNote(v string) {
	o.Note = &v
}

// GetPlaymode returns the Playmode field value if set, zero value otherwise.
func (o *TransportGotoNoteInfo) GetPlaymode() TransportAPIPlayMode {
	if o == nil || o.Playmode == nil {
		var ret TransportAPIPlayMode
		return ret
	}
	return *o.Playmode
}

// GetPlaymodeOk returns a tuple with the Playmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGotoNoteInfo) GetPlaymodeOk() (*TransportAPIPlayMode, bool) {
	if o == nil || o.Playmode == nil {
		return nil, false
	}
	return o.Playmode, true
}

// HasPlaymode returns a boolean if a field has been set.
func (o *TransportGotoNoteInfo) HasPlaymode() bool {
	if o != nil && o.Playmode != nil {
		return true
	}

	return false
}

// SetPlaymode gets a reference to the given TransportAPIPlayMode and assigns it to the Playmode field.
func (o *TransportGotoNoteInfo) SetPlaymode(v TransportAPIPlayMode) {
	o.Playmode = &v
}

func (o TransportGotoNoteInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transport != nil {
		toSerialize["transport"] = o.Transport
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if o.Playmode != nil {
		toSerialize["playmode"] = o.Playmode
	}
	return json.Marshal(toSerialize)
}

type NullableTransportGotoNoteInfo struct {
	value *TransportGotoNoteInfo
	isSet bool
}

func (v NullableTransportGotoNoteInfo) Get() *TransportGotoNoteInfo {
	return v.value
}

func (v *NullableTransportGotoNoteInfo) Set(val *TransportGotoNoteInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportGotoNoteInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportGotoNoteInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportGotoNoteInfo(val *TransportGotoNoteInfo) *NullableTransportGotoNoteInfo {
	return &NullableTransportGotoNoteInfo{value: val, isSet: true}
}

func (v NullableTransportGotoNoteInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportGotoNoteInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


