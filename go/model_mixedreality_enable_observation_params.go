/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityEnableObservationParams struct for MixedrealityEnableObservationParams
type MixedrealityEnableObservationParams struct {
	Uid *string `json:"uid,omitempty"`
	Enable *bool `json:"enable,omitempty"`
}

// NewMixedrealityEnableObservationParams instantiates a new MixedrealityEnableObservationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityEnableObservationParams() *MixedrealityEnableObservationParams {
	this := MixedrealityEnableObservationParams{}
	return &this
}

// NewMixedrealityEnableObservationParamsWithDefaults instantiates a new MixedrealityEnableObservationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityEnableObservationParamsWithDefaults() *MixedrealityEnableObservationParams {
	this := MixedrealityEnableObservationParams{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *MixedrealityEnableObservationParams) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityEnableObservationParams) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *MixedrealityEnableObservationParams) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *MixedrealityEnableObservationParams) SetUid(v string) {
	o.Uid = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *MixedrealityEnableObservationParams) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityEnableObservationParams) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *MixedrealityEnableObservationParams) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *MixedrealityEnableObservationParams) SetEnable(v bool) {
	o.Enable = &v
}

func (o MixedrealityEnableObservationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityEnableObservationParams struct {
	value *MixedrealityEnableObservationParams
	isSet bool
}

func (v NullableMixedrealityEnableObservationParams) Get() *MixedrealityEnableObservationParams {
	return v.value
}

func (v *NullableMixedrealityEnableObservationParams) Set(val *MixedrealityEnableObservationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityEnableObservationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityEnableObservationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityEnableObservationParams(val *MixedrealityEnableObservationParams) *NullableMixedrealityEnableObservationParams {
	return &NullableMixedrealityEnableObservationParams{value: val, isSet: true}
}

func (v NullableMixedrealityEnableObservationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityEnableObservationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


