/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ListMRSetsResponse struct for V1ListMRSetsResponse
type V1ListMRSetsResponse struct {
	Result *[]V1MRSetInfo `json:"result,omitempty"`
}

// NewV1ListMRSetsResponse instantiates a new V1ListMRSetsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ListMRSetsResponse() *V1ListMRSetsResponse {
	this := V1ListMRSetsResponse{}
	return &this
}

// NewV1ListMRSetsResponseWithDefaults instantiates a new V1ListMRSetsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ListMRSetsResponseWithDefaults() *V1ListMRSetsResponse {
	this := V1ListMRSetsResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *V1ListMRSetsResponse) GetResult() []V1MRSetInfo {
	if o == nil || o.Result == nil {
		var ret []V1MRSetInfo
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListMRSetsResponse) GetResultOk() (*[]V1MRSetInfo, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *V1ListMRSetsResponse) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given []V1MRSetInfo and assigns it to the Result field.
func (o *V1ListMRSetsResponse) SetResult(v []V1MRSetInfo) {
	o.Result = &v
}

func (o V1ListMRSetsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableV1ListMRSetsResponse struct {
	value *V1ListMRSetsResponse
	isSet bool
}

func (v NullableV1ListMRSetsResponse) Get() *V1ListMRSetsResponse {
	return v.value
}

func (v *NullableV1ListMRSetsResponse) Set(val *V1ListMRSetsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ListMRSetsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ListMRSetsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ListMRSetsResponse(val *V1ListMRSetsResponse) *NullableV1ListMRSetsResponse {
	return &NullableV1ListMRSetsResponse{value: val, isSet: true}
}

func (v NullableV1ListMRSetsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ListMRSetsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


