/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WorkloadInstanceInfoWorkloadInstanceStatus the model 'WorkloadInstanceInfoWorkloadInstanceStatus'
type WorkloadInstanceInfoWorkloadInstanceStatus string

// List of WorkloadInstanceInfoWorkloadInstanceStatus
const (
	UNKNOWN WorkloadInstanceInfoWorkloadInstanceStatus = "UNKNOWN"
	CRASHED WorkloadInstanceInfoWorkloadInstanceStatus = "CRASHED"
	ERROR WorkloadInstanceInfoWorkloadInstanceStatus = "ERROR"
	STOPPING WorkloadInstanceInfoWorkloadInstanceStatus = "STOPPING"
	STOPPED WorkloadInstanceInfoWorkloadInstanceStatus = "STOPPED"
	LAUNCHING WorkloadInstanceInfoWorkloadInstanceStatus = "LAUNCHING"
	STARTING WorkloadInstanceInfoWorkloadInstanceStatus = "STARTING"
	READY WorkloadInstanceInfoWorkloadInstanceStatus = "READY"
	STANDBY WorkloadInstanceInfoWorkloadInstanceStatus = "STANDBY"
	RUNNING WorkloadInstanceInfoWorkloadInstanceStatus = "RUNNING"
)

// All allowed values of WorkloadInstanceInfoWorkloadInstanceStatus enum
var AllowedWorkloadInstanceInfoWorkloadInstanceStatusEnumValues = []WorkloadInstanceInfoWorkloadInstanceStatus{
	"UNKNOWN",
	"CRASHED",
	"ERROR",
	"STOPPING",
	"STOPPED",
	"LAUNCHING",
	"STARTING",
	"READY",
	"STANDBY",
	"RUNNING",
}

func (v *WorkloadInstanceInfoWorkloadInstanceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadInstanceInfoWorkloadInstanceStatus(value)
	for _, existing := range AllowedWorkloadInstanceInfoWorkloadInstanceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkloadInstanceInfoWorkloadInstanceStatus", value)
}

// NewWorkloadInstanceInfoWorkloadInstanceStatusFromValue returns a pointer to a valid WorkloadInstanceInfoWorkloadInstanceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadInstanceInfoWorkloadInstanceStatusFromValue(v string) (*WorkloadInstanceInfoWorkloadInstanceStatus, error) {
	ev := WorkloadInstanceInfoWorkloadInstanceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkloadInstanceInfoWorkloadInstanceStatus: valid values are %v", v, AllowedWorkloadInstanceInfoWorkloadInstanceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadInstanceInfoWorkloadInstanceStatus) IsValid() bool {
	for _, existing := range AllowedWorkloadInstanceInfoWorkloadInstanceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadInstanceInfoWorkloadInstanceStatus value
func (v WorkloadInstanceInfoWorkloadInstanceStatus) Ptr() *WorkloadInstanceInfoWorkloadInstanceStatus {
	return &v
}

type NullableWorkloadInstanceInfoWorkloadInstanceStatus struct {
	value *WorkloadInstanceInfoWorkloadInstanceStatus
	isSet bool
}

func (v NullableWorkloadInstanceInfoWorkloadInstanceStatus) Get() *WorkloadInstanceInfoWorkloadInstanceStatus {
	return v.value
}

func (v *NullableWorkloadInstanceInfoWorkloadInstanceStatus) Set(val *WorkloadInstanceInfoWorkloadInstanceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadInstanceInfoWorkloadInstanceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadInstanceInfoWorkloadInstanceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadInstanceInfoWorkloadInstanceStatus(val *WorkloadInstanceInfoWorkloadInstanceStatus) *NullableWorkloadInstanceInfoWorkloadInstanceStatus {
	return &NullableWorkloadInstanceInfoWorkloadInstanceStatus{value: val, isSet: true}
}

func (v NullableWorkloadInstanceInfoWorkloadInstanceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadInstanceInfoWorkloadInstanceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

