/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContentImageMetadata struct for ContentImageMetadata
type ContentImageMetadata struct {
	Resolution *ContentResolution `json:"resolution,omitempty"`
	BitsPerPixel *int64 `json:"bitsPerPixel,omitempty"`
	Codec *string `json:"codec,omitempty"`
	HasAlpha *bool `json:"hasAlpha,omitempty"`
}

// NewContentImageMetadata instantiates a new ContentImageMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentImageMetadata() *ContentImageMetadata {
	this := ContentImageMetadata{}
	return &this
}

// NewContentImageMetadataWithDefaults instantiates a new ContentImageMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentImageMetadataWithDefaults() *ContentImageMetadata {
	this := ContentImageMetadata{}
	return &this
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *ContentImageMetadata) GetResolution() ContentResolution {
	if o == nil || o.Resolution == nil {
		var ret ContentResolution
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageMetadata) GetResolutionOk() (*ContentResolution, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *ContentImageMetadata) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given ContentResolution and assigns it to the Resolution field.
func (o *ContentImageMetadata) SetResolution(v ContentResolution) {
	o.Resolution = &v
}

// GetBitsPerPixel returns the BitsPerPixel field value if set, zero value otherwise.
func (o *ContentImageMetadata) GetBitsPerPixel() int64 {
	if o == nil || o.BitsPerPixel == nil {
		var ret int64
		return ret
	}
	return *o.BitsPerPixel
}

// GetBitsPerPixelOk returns a tuple with the BitsPerPixel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageMetadata) GetBitsPerPixelOk() (*int64, bool) {
	if o == nil || o.BitsPerPixel == nil {
		return nil, false
	}
	return o.BitsPerPixel, true
}

// HasBitsPerPixel returns a boolean if a field has been set.
func (o *ContentImageMetadata) HasBitsPerPixel() bool {
	if o != nil && o.BitsPerPixel != nil {
		return true
	}

	return false
}

// SetBitsPerPixel gets a reference to the given int64 and assigns it to the BitsPerPixel field.
func (o *ContentImageMetadata) SetBitsPerPixel(v int64) {
	o.BitsPerPixel = &v
}

// GetCodec returns the Codec field value if set, zero value otherwise.
func (o *ContentImageMetadata) GetCodec() string {
	if o == nil || o.Codec == nil {
		var ret string
		return ret
	}
	return *o.Codec
}

// GetCodecOk returns a tuple with the Codec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageMetadata) GetCodecOk() (*string, bool) {
	if o == nil || o.Codec == nil {
		return nil, false
	}
	return o.Codec, true
}

// HasCodec returns a boolean if a field has been set.
func (o *ContentImageMetadata) HasCodec() bool {
	if o != nil && o.Codec != nil {
		return true
	}

	return false
}

// SetCodec gets a reference to the given string and assigns it to the Codec field.
func (o *ContentImageMetadata) SetCodec(v string) {
	o.Codec = &v
}

// GetHasAlpha returns the HasAlpha field value if set, zero value otherwise.
func (o *ContentImageMetadata) GetHasAlpha() bool {
	if o == nil || o.HasAlpha == nil {
		var ret bool
		return ret
	}
	return *o.HasAlpha
}

// GetHasAlphaOk returns a tuple with the HasAlpha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentImageMetadata) GetHasAlphaOk() (*bool, bool) {
	if o == nil || o.HasAlpha == nil {
		return nil, false
	}
	return o.HasAlpha, true
}

// HasHasAlpha returns a boolean if a field has been set.
func (o *ContentImageMetadata) HasHasAlpha() bool {
	if o != nil && o.HasAlpha != nil {
		return true
	}

	return false
}

// SetHasAlpha gets a reference to the given bool and assigns it to the HasAlpha field.
func (o *ContentImageMetadata) SetHasAlpha(v bool) {
	o.HasAlpha = &v
}

func (o ContentImageMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	if o.BitsPerPixel != nil {
		toSerialize["bitsPerPixel"] = o.BitsPerPixel
	}
	if o.Codec != nil {
		toSerialize["codec"] = o.Codec
	}
	if o.HasAlpha != nil {
		toSerialize["hasAlpha"] = o.HasAlpha
	}
	return json.Marshal(toSerialize)
}

type NullableContentImageMetadata struct {
	value *ContentImageMetadata
	isSet bool
}

func (v NullableContentImageMetadata) Get() *ContentImageMetadata {
	return v.value
}

func (v *NullableContentImageMetadata) Set(val *ContentImageMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableContentImageMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableContentImageMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentImageMetadata(val *ContentImageMetadata) *NullableContentImageMetadata {
	return &NullableContentImageMetadata{value: val, isSet: true}
}

func (v NullableContentImageMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentImageMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


