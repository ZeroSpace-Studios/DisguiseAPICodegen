/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportSetEngagedInfo struct for TransportSetEngagedInfo
type TransportSetEngagedInfo struct {
	Transport *D3apiLocator `json:"transport,omitempty"`
	Engaged *bool `json:"engaged,omitempty"`
}

// NewTransportSetEngagedInfo instantiates a new TransportSetEngagedInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportSetEngagedInfo() *TransportSetEngagedInfo {
	this := TransportSetEngagedInfo{}
	return &this
}

// NewTransportSetEngagedInfoWithDefaults instantiates a new TransportSetEngagedInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportSetEngagedInfoWithDefaults() *TransportSetEngagedInfo {
	this := TransportSetEngagedInfo{}
	return &this
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *TransportSetEngagedInfo) GetTransport() D3apiLocator {
	if o == nil || o.Transport == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSetEngagedInfo) GetTransportOk() (*D3apiLocator, bool) {
	if o == nil || o.Transport == nil {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *TransportSetEngagedInfo) HasTransport() bool {
	if o != nil && o.Transport != nil {
		return true
	}

	return false
}

// SetTransport gets a reference to the given D3apiLocator and assigns it to the Transport field.
func (o *TransportSetEngagedInfo) SetTransport(v D3apiLocator) {
	o.Transport = &v
}

// GetEngaged returns the Engaged field value if set, zero value otherwise.
func (o *TransportSetEngagedInfo) GetEngaged() bool {
	if o == nil || o.Engaged == nil {
		var ret bool
		return ret
	}
	return *o.Engaged
}

// GetEngagedOk returns a tuple with the Engaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSetEngagedInfo) GetEngagedOk() (*bool, bool) {
	if o == nil || o.Engaged == nil {
		return nil, false
	}
	return o.Engaged, true
}

// HasEngaged returns a boolean if a field has been set.
func (o *TransportSetEngagedInfo) HasEngaged() bool {
	if o != nil && o.Engaged != nil {
		return true
	}

	return false
}

// SetEngaged gets a reference to the given bool and assigns it to the Engaged field.
func (o *TransportSetEngagedInfo) SetEngaged(v bool) {
	o.Engaged = &v
}

func (o TransportSetEngagedInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transport != nil {
		toSerialize["transport"] = o.Transport
	}
	if o.Engaged != nil {
		toSerialize["engaged"] = o.Engaged
	}
	return json.Marshal(toSerialize)
}

type NullableTransportSetEngagedInfo struct {
	value *TransportSetEngagedInfo
	isSet bool
}

func (v NullableTransportSetEngagedInfo) Get() *TransportSetEngagedInfo {
	return v.value
}

func (v *NullableTransportSetEngagedInfo) Set(val *TransportSetEngagedInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportSetEngagedInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportSetEngagedInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportSetEngagedInfo(val *TransportSetEngagedInfo) *NullableTransportSetEngagedInfo {
	return &NullableTransportSetEngagedInfo{value: val, isSet: true}
}

func (v NullableTransportSetEngagedInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportSetEngagedInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


