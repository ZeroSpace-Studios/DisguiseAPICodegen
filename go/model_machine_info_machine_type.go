/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MachineInfoMachineType the model 'MachineInfoMachineType'
type MachineInfoMachineType string

// List of MachineInfoMachineType
const (
	UNKNOWN MachineInfoMachineType = "Unknown"
	DESIGNER MachineInfoMachineType = "Designer"
	V2_5 MachineInfoMachineType = "V2_5"
	PRO4X2 MachineInfoMachineType = "Pro4x2"
	PRO4X4 MachineInfoMachineType = "Pro4x4"
	PLUS2X2 MachineInfoMachineType = "Plus2x2"
	PRO4X4_NO_VFCS MachineInfoMachineType = "Pro4x4NoVfcs"
	NODE MachineInfoMachineType = "Node"
	PRO2X4 MachineInfoMachineType = "Pro2x4"
	GX1 MachineInfoMachineType = "Gx1"
	GX2 MachineInfoMachineType = "Gx2"
	SOLO_V1 MachineInfoMachineType = "SoloV1"
	VX4 MachineInfoMachineType = "Vx4"
	GX2C MachineInfoMachineType = "Gx2c"
	RX MachineInfoMachineType = "Rx"
	RX_II MachineInfoMachineType = "RxII"
	VX1 MachineInfoMachineType = "Vx1"
	VX2 MachineInfoMachineType = "Vx2"
	VX4_PLUS MachineInfoMachineType = "Vx4Plus"
	GX3 MachineInfoMachineType = "Gx3"
)

// All allowed values of MachineInfoMachineType enum
var AllowedMachineInfoMachineTypeEnumValues = []MachineInfoMachineType{
	"Unknown",
	"Designer",
	"V2_5",
	"Pro4x2",
	"Pro4x4",
	"Plus2x2",
	"Pro4x4NoVfcs",
	"Node",
	"Pro2x4",
	"Gx1",
	"Gx2",
	"SoloV1",
	"Vx4",
	"Gx2c",
	"Rx",
	"RxII",
	"Vx1",
	"Vx2",
	"Vx4Plus",
	"Gx3",
}

func (v *MachineInfoMachineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MachineInfoMachineType(value)
	for _, existing := range AllowedMachineInfoMachineTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MachineInfoMachineType", value)
}

// NewMachineInfoMachineTypeFromValue returns a pointer to a valid MachineInfoMachineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineInfoMachineTypeFromValue(v string) (*MachineInfoMachineType, error) {
	ev := MachineInfoMachineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineInfoMachineType: valid values are %v", v, AllowedMachineInfoMachineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineInfoMachineType) IsValid() bool {
	for _, existing := range AllowedMachineInfoMachineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineInfoMachineType value
func (v MachineInfoMachineType) Ptr() *MachineInfoMachineType {
	return &v
}

type NullableMachineInfoMachineType struct {
	value *MachineInfoMachineType
	isSet bool
}

func (v NullableMachineInfoMachineType) Get() *MachineInfoMachineType {
	return v.value
}

func (v *NullableMachineInfoMachineType) Set(val *MachineInfoMachineType) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineInfoMachineType) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineInfoMachineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineInfoMachineType(val *MachineInfoMachineType) *NullableMachineInfoMachineType {
	return &NullableMachineInfoMachineType{value: val, isSet: true}
}

func (v NullableMachineInfoMachineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineInfoMachineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

