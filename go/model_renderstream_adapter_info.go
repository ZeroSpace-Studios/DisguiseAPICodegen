/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamAdapterInfo struct for RenderstreamAdapterInfo
type RenderstreamAdapterInfo struct {
	Name *string `json:"name,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	SubnetMask *string `json:"subnetMask,omitempty"`
}

// NewRenderstreamAdapterInfo instantiates a new RenderstreamAdapterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamAdapterInfo() *RenderstreamAdapterInfo {
	this := RenderstreamAdapterInfo{}
	return &this
}

// NewRenderstreamAdapterInfoWithDefaults instantiates a new RenderstreamAdapterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamAdapterInfoWithDefaults() *RenderstreamAdapterInfo {
	this := RenderstreamAdapterInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RenderstreamAdapterInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamAdapterInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RenderstreamAdapterInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RenderstreamAdapterInfo) SetName(v string) {
	o.Name = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *RenderstreamAdapterInfo) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamAdapterInfo) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *RenderstreamAdapterInfo) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *RenderstreamAdapterInfo) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *RenderstreamAdapterInfo) GetSubnetMask() string {
	if o == nil || o.SubnetMask == nil {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamAdapterInfo) GetSubnetMaskOk() (*string, bool) {
	if o == nil || o.SubnetMask == nil {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *RenderstreamAdapterInfo) HasSubnetMask() bool {
	if o != nil && o.SubnetMask != nil {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *RenderstreamAdapterInfo) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

func (o RenderstreamAdapterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.SubnetMask != nil {
		toSerialize["subnetMask"] = o.SubnetMask
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamAdapterInfo struct {
	value *RenderstreamAdapterInfo
	isSet bool
}

func (v NullableRenderstreamAdapterInfo) Get() *RenderstreamAdapterInfo {
	return v.value
}

func (v *NullableRenderstreamAdapterInfo) Set(val *RenderstreamAdapterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamAdapterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamAdapterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamAdapterInfo(val *RenderstreamAdapterInfo) *NullableRenderstreamAdapterInfo {
	return &NullableRenderstreamAdapterInfo{value: val, isSet: true}
}

func (v NullableRenderstreamAdapterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamAdapterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


