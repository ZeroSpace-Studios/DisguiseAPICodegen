/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StatusD3VersionInfo struct for StatusD3VersionInfo
type StatusD3VersionInfo struct {
	Major *int64 `json:"major,omitempty"`
	Minor *int64 `json:"minor,omitempty"`
	Hotfix *int64 `json:"hotfix,omitempty"`
	Revision *int64 `json:"revision,omitempty"`
}

// NewStatusD3VersionInfo instantiates a new StatusD3VersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusD3VersionInfo() *StatusD3VersionInfo {
	this := StatusD3VersionInfo{}
	return &this
}

// NewStatusD3VersionInfoWithDefaults instantiates a new StatusD3VersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusD3VersionInfoWithDefaults() *StatusD3VersionInfo {
	this := StatusD3VersionInfo{}
	return &this
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *StatusD3VersionInfo) GetMajor() int64 {
	if o == nil || o.Major == nil {
		var ret int64
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusD3VersionInfo) GetMajorOk() (*int64, bool) {
	if o == nil || o.Major == nil {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *StatusD3VersionInfo) HasMajor() bool {
	if o != nil && o.Major != nil {
		return true
	}

	return false
}

// SetMajor gets a reference to the given int64 and assigns it to the Major field.
func (o *StatusD3VersionInfo) SetMajor(v int64) {
	o.Major = &v
}

// GetMinor returns the Minor field value if set, zero value otherwise.
func (o *StatusD3VersionInfo) GetMinor() int64 {
	if o == nil || o.Minor == nil {
		var ret int64
		return ret
	}
	return *o.Minor
}

// GetMinorOk returns a tuple with the Minor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusD3VersionInfo) GetMinorOk() (*int64, bool) {
	if o == nil || o.Minor == nil {
		return nil, false
	}
	return o.Minor, true
}

// HasMinor returns a boolean if a field has been set.
func (o *StatusD3VersionInfo) HasMinor() bool {
	if o != nil && o.Minor != nil {
		return true
	}

	return false
}

// SetMinor gets a reference to the given int64 and assigns it to the Minor field.
func (o *StatusD3VersionInfo) SetMinor(v int64) {
	o.Minor = &v
}

// GetHotfix returns the Hotfix field value if set, zero value otherwise.
func (o *StatusD3VersionInfo) GetHotfix() int64 {
	if o == nil || o.Hotfix == nil {
		var ret int64
		return ret
	}
	return *o.Hotfix
}

// GetHotfixOk returns a tuple with the Hotfix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusD3VersionInfo) GetHotfixOk() (*int64, bool) {
	if o == nil || o.Hotfix == nil {
		return nil, false
	}
	return o.Hotfix, true
}

// HasHotfix returns a boolean if a field has been set.
func (o *StatusD3VersionInfo) HasHotfix() bool {
	if o != nil && o.Hotfix != nil {
		return true
	}

	return false
}

// SetHotfix gets a reference to the given int64 and assigns it to the Hotfix field.
func (o *StatusD3VersionInfo) SetHotfix(v int64) {
	o.Hotfix = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *StatusD3VersionInfo) GetRevision() int64 {
	if o == nil || o.Revision == nil {
		var ret int64
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusD3VersionInfo) GetRevisionOk() (*int64, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *StatusD3VersionInfo) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int64 and assigns it to the Revision field.
func (o *StatusD3VersionInfo) SetRevision(v int64) {
	o.Revision = &v
}

func (o StatusD3VersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Major != nil {
		toSerialize["major"] = o.Major
	}
	if o.Minor != nil {
		toSerialize["minor"] = o.Minor
	}
	if o.Hotfix != nil {
		toSerialize["hotfix"] = o.Hotfix
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	return json.Marshal(toSerialize)
}

type NullableStatusD3VersionInfo struct {
	value *StatusD3VersionInfo
	isSet bool
}

func (v NullableStatusD3VersionInfo) Get() *StatusD3VersionInfo {
	return v.value
}

func (v *NullableStatusD3VersionInfo) Set(val *StatusD3VersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusD3VersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusD3VersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusD3VersionInfo(val *StatusD3VersionInfo) *NullableStatusD3VersionInfo {
	return &NullableStatusD3VersionInfo{value: val, isSet: true}
}

func (v NullableStatusD3VersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusD3VersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


