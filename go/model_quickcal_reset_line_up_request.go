/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QuickcalResetLineUpRequest struct for QuickcalResetLineUpRequest
type QuickcalResetLineUpRequest struct {
	Projector *D3apiLocator `json:"projector,omitempty"`
}

// NewQuickcalResetLineUpRequest instantiates a new QuickcalResetLineUpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickcalResetLineUpRequest() *QuickcalResetLineUpRequest {
	this := QuickcalResetLineUpRequest{}
	return &this
}

// NewQuickcalResetLineUpRequestWithDefaults instantiates a new QuickcalResetLineUpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickcalResetLineUpRequestWithDefaults() *QuickcalResetLineUpRequest {
	this := QuickcalResetLineUpRequest{}
	return &this
}

// GetProjector returns the Projector field value if set, zero value otherwise.
func (o *QuickcalResetLineUpRequest) GetProjector() D3apiLocator {
	if o == nil || o.Projector == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Projector
}

// GetProjectorOk returns a tuple with the Projector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickcalResetLineUpRequest) GetProjectorOk() (*D3apiLocator, bool) {
	if o == nil || o.Projector == nil {
		return nil, false
	}
	return o.Projector, true
}

// HasProjector returns a boolean if a field has been set.
func (o *QuickcalResetLineUpRequest) HasProjector() bool {
	if o != nil && o.Projector != nil {
		return true
	}

	return false
}

// SetProjector gets a reference to the given D3apiLocator and assigns it to the Projector field.
func (o *QuickcalResetLineUpRequest) SetProjector(v D3apiLocator) {
	o.Projector = &v
}

func (o QuickcalResetLineUpRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projector != nil {
		toSerialize["projector"] = o.Projector
	}
	return json.Marshal(toSerialize)
}

type NullableQuickcalResetLineUpRequest struct {
	value *QuickcalResetLineUpRequest
	isSet bool
}

func (v NullableQuickcalResetLineUpRequest) Get() *QuickcalResetLineUpRequest {
	return v.value
}

func (v *NullableQuickcalResetLineUpRequest) Set(val *QuickcalResetLineUpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickcalResetLineUpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickcalResetLineUpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickcalResetLineUpRequest(val *QuickcalResetLineUpRequest) *NullableQuickcalResetLineUpRequest {
	return &NullableQuickcalResetLineUpRequest{value: val, isSet: true}
}

func (v NullableQuickcalResetLineUpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickcalResetLineUpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


