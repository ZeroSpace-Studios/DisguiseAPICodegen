/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamClippingRegion struct for RenderstreamClippingRegion
type RenderstreamClippingRegion struct {
	Left *float32 `json:"left,omitempty"`
	Right *float32 `json:"right,omitempty"`
	Top *float32 `json:"top,omitempty"`
	Bottom *float32 `json:"bottom,omitempty"`
}

// NewRenderstreamClippingRegion instantiates a new RenderstreamClippingRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamClippingRegion() *RenderstreamClippingRegion {
	this := RenderstreamClippingRegion{}
	return &this
}

// NewRenderstreamClippingRegionWithDefaults instantiates a new RenderstreamClippingRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamClippingRegionWithDefaults() *RenderstreamClippingRegion {
	this := RenderstreamClippingRegion{}
	return &this
}

// GetLeft returns the Left field value if set, zero value otherwise.
func (o *RenderstreamClippingRegion) GetLeft() float32 {
	if o == nil || o.Left == nil {
		var ret float32
		return ret
	}
	return *o.Left
}

// GetLeftOk returns a tuple with the Left field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamClippingRegion) GetLeftOk() (*float32, bool) {
	if o == nil || o.Left == nil {
		return nil, false
	}
	return o.Left, true
}

// HasLeft returns a boolean if a field has been set.
func (o *RenderstreamClippingRegion) HasLeft() bool {
	if o != nil && o.Left != nil {
		return true
	}

	return false
}

// SetLeft gets a reference to the given float32 and assigns it to the Left field.
func (o *RenderstreamClippingRegion) SetLeft(v float32) {
	o.Left = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *RenderstreamClippingRegion) GetRight() float32 {
	if o == nil || o.Right == nil {
		var ret float32
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamClippingRegion) GetRightOk() (*float32, bool) {
	if o == nil || o.Right == nil {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *RenderstreamClippingRegion) HasRight() bool {
	if o != nil && o.Right != nil {
		return true
	}

	return false
}

// SetRight gets a reference to the given float32 and assigns it to the Right field.
func (o *RenderstreamClippingRegion) SetRight(v float32) {
	o.Right = &v
}

// GetTop returns the Top field value if set, zero value otherwise.
func (o *RenderstreamClippingRegion) GetTop() float32 {
	if o == nil || o.Top == nil {
		var ret float32
		return ret
	}
	return *o.Top
}

// GetTopOk returns a tuple with the Top field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamClippingRegion) GetTopOk() (*float32, bool) {
	if o == nil || o.Top == nil {
		return nil, false
	}
	return o.Top, true
}

// HasTop returns a boolean if a field has been set.
func (o *RenderstreamClippingRegion) HasTop() bool {
	if o != nil && o.Top != nil {
		return true
	}

	return false
}

// SetTop gets a reference to the given float32 and assigns it to the Top field.
func (o *RenderstreamClippingRegion) SetTop(v float32) {
	o.Top = &v
}

// GetBottom returns the Bottom field value if set, zero value otherwise.
func (o *RenderstreamClippingRegion) GetBottom() float32 {
	if o == nil || o.Bottom == nil {
		var ret float32
		return ret
	}
	return *o.Bottom
}

// GetBottomOk returns a tuple with the Bottom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamClippingRegion) GetBottomOk() (*float32, bool) {
	if o == nil || o.Bottom == nil {
		return nil, false
	}
	return o.Bottom, true
}

// HasBottom returns a boolean if a field has been set.
func (o *RenderstreamClippingRegion) HasBottom() bool {
	if o != nil && o.Bottom != nil {
		return true
	}

	return false
}

// SetBottom gets a reference to the given float32 and assigns it to the Bottom field.
func (o *RenderstreamClippingRegion) SetBottom(v float32) {
	o.Bottom = &v
}

func (o RenderstreamClippingRegion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Left != nil {
		toSerialize["left"] = o.Left
	}
	if o.Right != nil {
		toSerialize["right"] = o.Right
	}
	if o.Top != nil {
		toSerialize["top"] = o.Top
	}
	if o.Bottom != nil {
		toSerialize["bottom"] = o.Bottom
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamClippingRegion struct {
	value *RenderstreamClippingRegion
	isSet bool
}

func (v NullableRenderstreamClippingRegion) Get() *RenderstreamClippingRegion {
	return v.value
}

func (v *NullableRenderstreamClippingRegion) Set(val *RenderstreamClippingRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamClippingRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamClippingRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamClippingRegion(val *RenderstreamClippingRegion) *NullableRenderstreamClippingRegion {
	return &NullableRenderstreamClippingRegion{value: val, isSet: true}
}

func (v NullableRenderstreamClippingRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamClippingRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


