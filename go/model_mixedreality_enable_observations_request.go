/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityEnableObservationsRequest struct for MixedrealityEnableObservationsRequest
type MixedrealityEnableObservationsRequest struct {
	Observations *[]MixedrealityEnableObservationParams `json:"observations,omitempty"`
}

// NewMixedrealityEnableObservationsRequest instantiates a new MixedrealityEnableObservationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityEnableObservationsRequest() *MixedrealityEnableObservationsRequest {
	this := MixedrealityEnableObservationsRequest{}
	return &this
}

// NewMixedrealityEnableObservationsRequestWithDefaults instantiates a new MixedrealityEnableObservationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityEnableObservationsRequestWithDefaults() *MixedrealityEnableObservationsRequest {
	this := MixedrealityEnableObservationsRequest{}
	return &this
}

// GetObservations returns the Observations field value if set, zero value otherwise.
func (o *MixedrealityEnableObservationsRequest) GetObservations() []MixedrealityEnableObservationParams {
	if o == nil || o.Observations == nil {
		var ret []MixedrealityEnableObservationParams
		return ret
	}
	return *o.Observations
}

// GetObservationsOk returns a tuple with the Observations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityEnableObservationsRequest) GetObservationsOk() (*[]MixedrealityEnableObservationParams, bool) {
	if o == nil || o.Observations == nil {
		return nil, false
	}
	return o.Observations, true
}

// HasObservations returns a boolean if a field has been set.
func (o *MixedrealityEnableObservationsRequest) HasObservations() bool {
	if o != nil && o.Observations != nil {
		return true
	}

	return false
}

// SetObservations gets a reference to the given []MixedrealityEnableObservationParams and assigns it to the Observations field.
func (o *MixedrealityEnableObservationsRequest) SetObservations(v []MixedrealityEnableObservationParams) {
	o.Observations = &v
}

func (o MixedrealityEnableObservationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Observations != nil {
		toSerialize["observations"] = o.Observations
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityEnableObservationsRequest struct {
	value *MixedrealityEnableObservationsRequest
	isSet bool
}

func (v NullableMixedrealityEnableObservationsRequest) Get() *MixedrealityEnableObservationsRequest {
	return v.value
}

func (v *NullableMixedrealityEnableObservationsRequest) Set(val *MixedrealityEnableObservationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityEnableObservationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityEnableObservationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityEnableObservationsRequest(val *MixedrealityEnableObservationsRequest) *NullableMixedrealityEnableObservationsRequest {
	return &NullableMixedrealityEnableObservationsRequest{value: val, isSet: true}
}

func (v NullableMixedrealityEnableObservationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityEnableObservationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


