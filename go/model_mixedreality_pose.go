/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityPose struct for MixedrealityPose
type MixedrealityPose struct {
	Position *D3apiVec3Float `json:"position,omitempty"`
	Rotation *D3apiVec3Float `json:"rotation,omitempty"`
}

// NewMixedrealityPose instantiates a new MixedrealityPose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityPose() *MixedrealityPose {
	this := MixedrealityPose{}
	return &this
}

// NewMixedrealityPoseWithDefaults instantiates a new MixedrealityPose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityPoseWithDefaults() *MixedrealityPose {
	this := MixedrealityPose{}
	return &this
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *MixedrealityPose) GetPosition() D3apiVec3Float {
	if o == nil || o.Position == nil {
		var ret D3apiVec3Float
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityPose) GetPositionOk() (*D3apiVec3Float, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *MixedrealityPose) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given D3apiVec3Float and assigns it to the Position field.
func (o *MixedrealityPose) SetPosition(v D3apiVec3Float) {
	o.Position = &v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *MixedrealityPose) GetRotation() D3apiVec3Float {
	if o == nil || o.Rotation == nil {
		var ret D3apiVec3Float
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityPose) GetRotationOk() (*D3apiVec3Float, bool) {
	if o == nil || o.Rotation == nil {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *MixedrealityPose) HasRotation() bool {
	if o != nil && o.Rotation != nil {
		return true
	}

	return false
}

// SetRotation gets a reference to the given D3apiVec3Float and assigns it to the Rotation field.
func (o *MixedrealityPose) SetRotation(v D3apiVec3Float) {
	o.Rotation = &v
}

func (o MixedrealityPose) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Rotation != nil {
		toSerialize["rotation"] = o.Rotation
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityPose struct {
	value *MixedrealityPose
	isSet bool
}

func (v NullableMixedrealityPose) Get() *MixedrealityPose {
	return v.value
}

func (v *NullableMixedrealityPose) Set(val *MixedrealityPose) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityPose) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityPose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityPose(val *MixedrealityPose) *NullableMixedrealityPose {
	return &NullableMixedrealityPose{value: val, isSet: true}
}

func (v NullableMixedrealityPose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityPose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


