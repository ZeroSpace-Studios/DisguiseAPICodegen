/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportTrackInfo struct for TransportTrackInfo
type TransportTrackInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	Length *float64 `json:"length,omitempty"`
	Crossfade *TrackInfoCrossfadeMode `json:"crossfade,omitempty"`
}

// NewTransportTrackInfo instantiates a new TransportTrackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportTrackInfo() *TransportTrackInfo {
	this := TransportTrackInfo{}
	var crossfade TrackInfoCrossfadeMode = UNKNOWN
	this.Crossfade = &crossfade
	return &this
}

// NewTransportTrackInfoWithDefaults instantiates a new TransportTrackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportTrackInfoWithDefaults() *TransportTrackInfo {
	this := TransportTrackInfo{}
	var crossfade TrackInfoCrossfadeMode = UNKNOWN
	this.Crossfade = &crossfade
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *TransportTrackInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportTrackInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *TransportTrackInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *TransportTrackInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransportTrackInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportTrackInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransportTrackInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TransportTrackInfo) SetName(v string) {
	o.Name = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *TransportTrackInfo) GetLength() float64 {
	if o == nil || o.Length == nil {
		var ret float64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportTrackInfo) GetLengthOk() (*float64, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *TransportTrackInfo) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given float64 and assigns it to the Length field.
func (o *TransportTrackInfo) SetLength(v float64) {
	o.Length = &v
}

// GetCrossfade returns the Crossfade field value if set, zero value otherwise.
func (o *TransportTrackInfo) GetCrossfade() TrackInfoCrossfadeMode {
	if o == nil || o.Crossfade == nil {
		var ret TrackInfoCrossfadeMode
		return ret
	}
	return *o.Crossfade
}

// GetCrossfadeOk returns a tuple with the Crossfade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportTrackInfo) GetCrossfadeOk() (*TrackInfoCrossfadeMode, bool) {
	if o == nil || o.Crossfade == nil {
		return nil, false
	}
	return o.Crossfade, true
}

// HasCrossfade returns a boolean if a field has been set.
func (o *TransportTrackInfo) HasCrossfade() bool {
	if o != nil && o.Crossfade != nil {
		return true
	}

	return false
}

// SetCrossfade gets a reference to the given TrackInfoCrossfadeMode and assigns it to the Crossfade field.
func (o *TransportTrackInfo) SetCrossfade(v TrackInfoCrossfadeMode) {
	o.Crossfade = &v
}

func (o TransportTrackInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.Crossfade != nil {
		toSerialize["crossfade"] = o.Crossfade
	}
	return json.Marshal(toSerialize)
}

type NullableTransportTrackInfo struct {
	value *TransportTrackInfo
	isSet bool
}

func (v NullableTransportTrackInfo) Get() *TransportTrackInfo {
	return v.value
}

func (v *NullableTransportTrackInfo) Set(val *TransportTrackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportTrackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportTrackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportTrackInfo(val *TransportTrackInfo) *NullableTransportTrackInfo {
	return &NullableTransportTrackInfo{value: val, isSet: true}
}

func (v NullableTransportTrackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportTrackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


