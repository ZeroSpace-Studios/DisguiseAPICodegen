/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StreamInfoStreamStatus the model 'StreamInfoStreamStatus'
type StreamInfoStreamStatus string

// List of StreamInfoStreamStatus
const (
	NONE StreamInfoStreamStatus = "None"
	GOOD StreamInfoStreamStatus = "Good"
	DROPPING_FRAMES StreamInfoStreamStatus = "DroppingFrames"
	BAD_STREAM StreamInfoStreamStatus = "BadStream"
	NO_STREAM StreamInfoStreamStatus = "NoStream"
	OFFLINE StreamInfoStreamStatus = "Offline"
)

// All allowed values of StreamInfoStreamStatus enum
var AllowedStreamInfoStreamStatusEnumValues = []StreamInfoStreamStatus{
	"None",
	"Good",
	"DroppingFrames",
	"BadStream",
	"NoStream",
	"Offline",
}

func (v *StreamInfoStreamStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamInfoStreamStatus(value)
	for _, existing := range AllowedStreamInfoStreamStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamInfoStreamStatus", value)
}

// NewStreamInfoStreamStatusFromValue returns a pointer to a valid StreamInfoStreamStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamInfoStreamStatusFromValue(v string) (*StreamInfoStreamStatus, error) {
	ev := StreamInfoStreamStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamInfoStreamStatus: valid values are %v", v, AllowedStreamInfoStreamStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamInfoStreamStatus) IsValid() bool {
	for _, existing := range AllowedStreamInfoStreamStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamInfoStreamStatus value
func (v StreamInfoStreamStatus) Ptr() *StreamInfoStreamStatus {
	return &v
}

type NullableStreamInfoStreamStatus struct {
	value *StreamInfoStreamStatus
	isSet bool
}

func (v NullableStreamInfoStreamStatus) Get() *StreamInfoStreamStatus {
	return v.value
}

func (v *NullableStreamInfoStreamStatus) Set(val *StreamInfoStreamStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamInfoStreamStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamInfoStreamStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamInfoStreamStatus(val *StreamInfoStreamStatus) *NullableStreamInfoStreamStatus {
	return &NullableStreamInfoStreamStatus{value: val, isSet: true}
}

func (v NullableStreamInfoStreamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamInfoStreamStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

