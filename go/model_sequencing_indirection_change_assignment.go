/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SequencingIndirectionChangeAssignment struct for SequencingIndirectionChangeAssignment
type SequencingIndirectionChangeAssignment struct {
	Indirection *D3apiLocator `json:"indirection,omitempty"`
	Resource *D3apiLocator `json:"resource,omitempty"`
}

// NewSequencingIndirectionChangeAssignment instantiates a new SequencingIndirectionChangeAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSequencingIndirectionChangeAssignment() *SequencingIndirectionChangeAssignment {
	this := SequencingIndirectionChangeAssignment{}
	return &this
}

// NewSequencingIndirectionChangeAssignmentWithDefaults instantiates a new SequencingIndirectionChangeAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSequencingIndirectionChangeAssignmentWithDefaults() *SequencingIndirectionChangeAssignment {
	this := SequencingIndirectionChangeAssignment{}
	return &this
}

// GetIndirection returns the Indirection field value if set, zero value otherwise.
func (o *SequencingIndirectionChangeAssignment) GetIndirection() D3apiLocator {
	if o == nil || o.Indirection == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Indirection
}

// GetIndirectionOk returns a tuple with the Indirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequencingIndirectionChangeAssignment) GetIndirectionOk() (*D3apiLocator, bool) {
	if o == nil || o.Indirection == nil {
		return nil, false
	}
	return o.Indirection, true
}

// HasIndirection returns a boolean if a field has been set.
func (o *SequencingIndirectionChangeAssignment) HasIndirection() bool {
	if o != nil && o.Indirection != nil {
		return true
	}

	return false
}

// SetIndirection gets a reference to the given D3apiLocator and assigns it to the Indirection field.
func (o *SequencingIndirectionChangeAssignment) SetIndirection(v D3apiLocator) {
	o.Indirection = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *SequencingIndirectionChangeAssignment) GetResource() D3apiLocator {
	if o == nil || o.Resource == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequencingIndirectionChangeAssignment) GetResourceOk() (*D3apiLocator, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SequencingIndirectionChangeAssignment) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given D3apiLocator and assigns it to the Resource field.
func (o *SequencingIndirectionChangeAssignment) SetResource(v D3apiLocator) {
	o.Resource = &v
}

func (o SequencingIndirectionChangeAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Indirection != nil {
		toSerialize["indirection"] = o.Indirection
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableSequencingIndirectionChangeAssignment struct {
	value *SequencingIndirectionChangeAssignment
	isSet bool
}

func (v NullableSequencingIndirectionChangeAssignment) Get() *SequencingIndirectionChangeAssignment {
	return v.value
}

func (v *NullableSequencingIndirectionChangeAssignment) Set(val *SequencingIndirectionChangeAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableSequencingIndirectionChangeAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableSequencingIndirectionChangeAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSequencingIndirectionChangeAssignment(val *SequencingIndirectionChangeAssignment) *NullableSequencingIndirectionChangeAssignment {
	return &NullableSequencingIndirectionChangeAssignment{value: val, isSet: true}
}

func (v NullableSequencingIndirectionChangeAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSequencingIndirectionChangeAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


