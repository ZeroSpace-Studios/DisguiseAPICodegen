/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// D3apiVec3Float struct for D3apiVec3Float
type D3apiVec3Float struct {
	X *float32 `json:"x,omitempty"`
	Y *float32 `json:"y,omitempty"`
	Z *float32 `json:"z,omitempty"`
}

// NewD3apiVec3Float instantiates a new D3apiVec3Float object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewD3apiVec3Float() *D3apiVec3Float {
	this := D3apiVec3Float{}
	return &this
}

// NewD3apiVec3FloatWithDefaults instantiates a new D3apiVec3Float object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewD3apiVec3FloatWithDefaults() *D3apiVec3Float {
	this := D3apiVec3Float{}
	return &this
}

// GetX returns the X field value if set, zero value otherwise.
func (o *D3apiVec3Float) GetX() float32 {
	if o == nil || o.X == nil {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D3apiVec3Float) GetXOk() (*float32, bool) {
	if o == nil || o.X == nil {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *D3apiVec3Float) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *D3apiVec3Float) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *D3apiVec3Float) GetY() float32 {
	if o == nil || o.Y == nil {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D3apiVec3Float) GetYOk() (*float32, bool) {
	if o == nil || o.Y == nil {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *D3apiVec3Float) HasY() bool {
	if o != nil && o.Y != nil {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *D3apiVec3Float) SetY(v float32) {
	o.Y = &v
}

// GetZ returns the Z field value if set, zero value otherwise.
func (o *D3apiVec3Float) GetZ() float32 {
	if o == nil || o.Z == nil {
		var ret float32
		return ret
	}
	return *o.Z
}

// GetZOk returns a tuple with the Z field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D3apiVec3Float) GetZOk() (*float32, bool) {
	if o == nil || o.Z == nil {
		return nil, false
	}
	return o.Z, true
}

// HasZ returns a boolean if a field has been set.
func (o *D3apiVec3Float) HasZ() bool {
	if o != nil && o.Z != nil {
		return true
	}

	return false
}

// SetZ gets a reference to the given float32 and assigns it to the Z field.
func (o *D3apiVec3Float) SetZ(v float32) {
	o.Z = &v
}

func (o D3apiVec3Float) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.X != nil {
		toSerialize["x"] = o.X
	}
	if o.Y != nil {
		toSerialize["y"] = o.Y
	}
	if o.Z != nil {
		toSerialize["z"] = o.Z
	}
	return json.Marshal(toSerialize)
}

type NullableD3apiVec3Float struct {
	value *D3apiVec3Float
	isSet bool
}

func (v NullableD3apiVec3Float) Get() *D3apiVec3Float {
	return v.value
}

func (v *NullableD3apiVec3Float) Set(val *D3apiVec3Float) {
	v.value = val
	v.isSet = true
}

func (v NullableD3apiVec3Float) IsSet() bool {
	return v.isSet
}

func (v *NullableD3apiVec3Float) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableD3apiVec3Float(val *D3apiVec3Float) *NullableD3apiVec3Float {
	return &NullableD3apiVec3Float{value: val, isSet: true}
}

func (v NullableD3apiVec3Float) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableD3apiVec3Float) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


