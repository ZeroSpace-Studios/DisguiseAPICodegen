/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SequencingListIndirectionsResponse struct for SequencingListIndirectionsResponse
type SequencingListIndirectionsResponse struct {
	Status *RpcStatus `json:"status,omitempty"`
	Result *[]SequencingListIndirectionItem `json:"result,omitempty"`
}

// NewSequencingListIndirectionsResponse instantiates a new SequencingListIndirectionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSequencingListIndirectionsResponse() *SequencingListIndirectionsResponse {
	this := SequencingListIndirectionsResponse{}
	return &this
}

// NewSequencingListIndirectionsResponseWithDefaults instantiates a new SequencingListIndirectionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSequencingListIndirectionsResponseWithDefaults() *SequencingListIndirectionsResponse {
	this := SequencingListIndirectionsResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SequencingListIndirectionsResponse) GetStatus() RpcStatus {
	if o == nil || o.Status == nil {
		var ret RpcStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequencingListIndirectionsResponse) GetStatusOk() (*RpcStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SequencingListIndirectionsResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RpcStatus and assigns it to the Status field.
func (o *SequencingListIndirectionsResponse) SetStatus(v RpcStatus) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SequencingListIndirectionsResponse) GetResult() []SequencingListIndirectionItem {
	if o == nil || o.Result == nil {
		var ret []SequencingListIndirectionItem
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequencingListIndirectionsResponse) GetResultOk() (*[]SequencingListIndirectionItem, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SequencingListIndirectionsResponse) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given []SequencingListIndirectionItem and assigns it to the Result field.
func (o *SequencingListIndirectionsResponse) SetResult(v []SequencingListIndirectionItem) {
	o.Result = &v
}

func (o SequencingListIndirectionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableSequencingListIndirectionsResponse struct {
	value *SequencingListIndirectionsResponse
	isSet bool
}

func (v NullableSequencingListIndirectionsResponse) Get() *SequencingListIndirectionsResponse {
	return v.value
}

func (v *NullableSequencingListIndirectionsResponse) Set(val *SequencingListIndirectionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSequencingListIndirectionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSequencingListIndirectionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSequencingListIndirectionsResponse(val *SequencingListIndirectionsResponse) *NullableSequencingListIndirectionsResponse {
	return &NullableSequencingListIndirectionsResponse{value: val, isSet: true}
}

func (v NullableSequencingListIndirectionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSequencingListIndirectionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


