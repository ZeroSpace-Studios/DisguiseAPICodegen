/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ThumbnailsApiService ThumbnailsApi service
type ThumbnailsApiService service

type ApiThumbnailsGetThumbnailRequest struct {
	ctx _context.Context
	ApiService *ThumbnailsApiService
	uid string
	width *int64
	height *int64
}

// width of thumbnail.
func (r ApiThumbnailsGetThumbnailRequest) Width(width int64) ApiThumbnailsGetThumbnailRequest {
	r.width = &width
	return r
}
// height of thumbnail.
func (r ApiThumbnailsGetThumbnailRequest) Height(height int64) ApiThumbnailsGetThumbnailRequest {
	r.height = &height
	return r
}

func (r ApiThumbnailsGetThumbnailRequest) Execute() (ThumbnailsGetThumbnailResponse, *_nethttp.Response, error) {
	return r.ApiService.ThumbnailsGetThumbnailExecute(r)
}

/*
ThumbnailsGetThumbnail Get thumbnail for a resource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uid unique resource id
 @return ApiThumbnailsGetThumbnailRequest
*/
func (a *ThumbnailsApiService) ThumbnailsGetThumbnail(ctx _context.Context, uid string) ApiThumbnailsGetThumbnailRequest {
	return ApiThumbnailsGetThumbnailRequest{
		ApiService: a,
		ctx: ctx,
		uid: uid,
	}
}

// Execute executes the request
//  @return ThumbnailsGetThumbnailResponse
func (a *ThumbnailsApiService) ThumbnailsGetThumbnailExecute(r ApiThumbnailsGetThumbnailRequest) (ThumbnailsGetThumbnailResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ThumbnailsGetThumbnailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbnailsApiService.ThumbnailsGetThumbnail")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/thumbnail/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", _neturl.PathEscape(parameterToString(r.uid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.width != nil {
		localVarQueryParams.Add("width", parameterToString(*r.width, ""))
	}
	if r.height != nil {
		localVarQueryParams.Add("height", parameterToString(*r.height, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
