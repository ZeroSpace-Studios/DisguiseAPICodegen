/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CameracalibrationEnableObservationResponse struct for CameracalibrationEnableObservationResponse
type CameracalibrationEnableObservationResponse struct {
	Result *bool `json:"result,omitempty"`
}

// NewCameracalibrationEnableObservationResponse instantiates a new CameracalibrationEnableObservationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCameracalibrationEnableObservationResponse() *CameracalibrationEnableObservationResponse {
	this := CameracalibrationEnableObservationResponse{}
	return &this
}

// NewCameracalibrationEnableObservationResponseWithDefaults instantiates a new CameracalibrationEnableObservationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCameracalibrationEnableObservationResponseWithDefaults() *CameracalibrationEnableObservationResponse {
	this := CameracalibrationEnableObservationResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CameracalibrationEnableObservationResponse) GetResult() bool {
	if o == nil || o.Result == nil {
		var ret bool
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationEnableObservationResponse) GetResultOk() (*bool, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CameracalibrationEnableObservationResponse) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given bool and assigns it to the Result field.
func (o *CameracalibrationEnableObservationResponse) SetResult(v bool) {
	o.Result = &v
}

func (o CameracalibrationEnableObservationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableCameracalibrationEnableObservationResponse struct {
	value *CameracalibrationEnableObservationResponse
	isSet bool
}

func (v NullableCameracalibrationEnableObservationResponse) Get() *CameracalibrationEnableObservationResponse {
	return v.value
}

func (v *NullableCameracalibrationEnableObservationResponse) Set(val *CameracalibrationEnableObservationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCameracalibrationEnableObservationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCameracalibrationEnableObservationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCameracalibrationEnableObservationResponse(val *CameracalibrationEnableObservationResponse) *NullableCameracalibrationEnableObservationResponse {
	return &NullableCameracalibrationEnableObservationResponse{value: val, isSet: true}
}

func (v NullableCameracalibrationEnableObservationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCameracalibrationEnableObservationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


