/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StatusHealthStates struct for StatusHealthStates
type StatusHealthStates struct {
	Name *string `json:"name,omitempty"`
	Detail *string `json:"detail,omitempty"`
	Category *string `json:"category,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

// NewStatusHealthStates instantiates a new StatusHealthStates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusHealthStates() *StatusHealthStates {
	this := StatusHealthStates{}
	return &this
}

// NewStatusHealthStatesWithDefaults instantiates a new StatusHealthStates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusHealthStatesWithDefaults() *StatusHealthStates {
	this := StatusHealthStates{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StatusHealthStates) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthStates) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StatusHealthStates) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StatusHealthStates) SetName(v string) {
	o.Name = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *StatusHealthStates) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthStates) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *StatusHealthStates) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *StatusHealthStates) SetDetail(v string) {
	o.Detail = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *StatusHealthStates) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthStates) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *StatusHealthStates) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *StatusHealthStates) SetCategory(v string) {
	o.Category = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *StatusHealthStates) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthStates) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *StatusHealthStates) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *StatusHealthStates) SetSeverity(v string) {
	o.Severity = &v
}

func (o StatusHealthStates) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	return json.Marshal(toSerialize)
}

type NullableStatusHealthStates struct {
	value *StatusHealthStates
	isSet bool
}

func (v NullableStatusHealthStates) Get() *StatusHealthStates {
	return v.value
}

func (v *NullableStatusHealthStates) Set(val *StatusHealthStates) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusHealthStates) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusHealthStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusHealthStates(val *StatusHealthStates) *NullableStatusHealthStates {
	return &NullableStatusHealthStates{value: val, isSet: true}
}

func (v NullableStatusHealthStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusHealthStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


