/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamSyncLayersRequest struct for RenderstreamSyncLayersRequest
type RenderstreamSyncLayersRequest struct {
	Layers *[]D3apiLocator `json:"layers,omitempty"`
}

// NewRenderstreamSyncLayersRequest instantiates a new RenderstreamSyncLayersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamSyncLayersRequest() *RenderstreamSyncLayersRequest {
	this := RenderstreamSyncLayersRequest{}
	return &this
}

// NewRenderstreamSyncLayersRequestWithDefaults instantiates a new RenderstreamSyncLayersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamSyncLayersRequestWithDefaults() *RenderstreamSyncLayersRequest {
	this := RenderstreamSyncLayersRequest{}
	return &this
}

// GetLayers returns the Layers field value if set, zero value otherwise.
func (o *RenderstreamSyncLayersRequest) GetLayers() []D3apiLocator {
	if o == nil || o.Layers == nil {
		var ret []D3apiLocator
		return ret
	}
	return *o.Layers
}

// GetLayersOk returns a tuple with the Layers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamSyncLayersRequest) GetLayersOk() (*[]D3apiLocator, bool) {
	if o == nil || o.Layers == nil {
		return nil, false
	}
	return o.Layers, true
}

// HasLayers returns a boolean if a field has been set.
func (o *RenderstreamSyncLayersRequest) HasLayers() bool {
	if o != nil && o.Layers != nil {
		return true
	}

	return false
}

// SetLayers gets a reference to the given []D3apiLocator and assigns it to the Layers field.
func (o *RenderstreamSyncLayersRequest) SetLayers(v []D3apiLocator) {
	o.Layers = &v
}

func (o RenderstreamSyncLayersRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Layers != nil {
		toSerialize["layers"] = o.Layers
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamSyncLayersRequest struct {
	value *RenderstreamSyncLayersRequest
	isSet bool
}

func (v NullableRenderstreamSyncLayersRequest) Get() *RenderstreamSyncLayersRequest {
	return v.value
}

func (v *NullableRenderstreamSyncLayersRequest) Set(val *RenderstreamSyncLayersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamSyncLayersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamSyncLayersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamSyncLayersRequest(val *RenderstreamSyncLayersRequest) *NullableRenderstreamSyncLayersRequest {
	return &NullableRenderstreamSyncLayersRequest{value: val, isSet: true}
}

func (v NullableRenderstreamSyncLayersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamSyncLayersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


