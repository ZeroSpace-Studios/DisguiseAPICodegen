/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StatusNotificationsReport struct for StatusNotificationsReport
type StatusNotificationsReport struct {
	Machine *Statusd3Machine `json:"machine,omitempty"`
	Notifications *[]StatusNotification `json:"notifications,omitempty"`
}

// NewStatusNotificationsReport instantiates a new StatusNotificationsReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusNotificationsReport() *StatusNotificationsReport {
	this := StatusNotificationsReport{}
	return &this
}

// NewStatusNotificationsReportWithDefaults instantiates a new StatusNotificationsReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusNotificationsReportWithDefaults() *StatusNotificationsReport {
	this := StatusNotificationsReport{}
	return &this
}

// GetMachine returns the Machine field value if set, zero value otherwise.
func (o *StatusNotificationsReport) GetMachine() Statusd3Machine {
	if o == nil || o.Machine == nil {
		var ret Statusd3Machine
		return ret
	}
	return *o.Machine
}

// GetMachineOk returns a tuple with the Machine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusNotificationsReport) GetMachineOk() (*Statusd3Machine, bool) {
	if o == nil || o.Machine == nil {
		return nil, false
	}
	return o.Machine, true
}

// HasMachine returns a boolean if a field has been set.
func (o *StatusNotificationsReport) HasMachine() bool {
	if o != nil && o.Machine != nil {
		return true
	}

	return false
}

// SetMachine gets a reference to the given Statusd3Machine and assigns it to the Machine field.
func (o *StatusNotificationsReport) SetMachine(v Statusd3Machine) {
	o.Machine = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *StatusNotificationsReport) GetNotifications() []StatusNotification {
	if o == nil || o.Notifications == nil {
		var ret []StatusNotification
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusNotificationsReport) GetNotificationsOk() (*[]StatusNotification, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *StatusNotificationsReport) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []StatusNotification and assigns it to the Notifications field.
func (o *StatusNotificationsReport) SetNotifications(v []StatusNotification) {
	o.Notifications = &v
}

func (o StatusNotificationsReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Machine != nil {
		toSerialize["machine"] = o.Machine
	}
	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}
	return json.Marshal(toSerialize)
}

type NullableStatusNotificationsReport struct {
	value *StatusNotificationsReport
	isSet bool
}

func (v NullableStatusNotificationsReport) Get() *StatusNotificationsReport {
	return v.value
}

func (v *NullableStatusNotificationsReport) Set(val *StatusNotificationsReport) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusNotificationsReport) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusNotificationsReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusNotificationsReport(val *StatusNotificationsReport) *NullableStatusNotificationsReport {
	return &NullableStatusNotificationsReport{value: val, isSet: true}
}

func (v NullableStatusNotificationsReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusNotificationsReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


