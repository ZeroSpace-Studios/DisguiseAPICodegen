/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityDeleteObservationsRequest struct for MixedrealityDeleteObservationsRequest
type MixedrealityDeleteObservationsRequest struct {
	Observations *[]string `json:"observations,omitempty"`
}

// NewMixedrealityDeleteObservationsRequest instantiates a new MixedrealityDeleteObservationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityDeleteObservationsRequest() *MixedrealityDeleteObservationsRequest {
	this := MixedrealityDeleteObservationsRequest{}
	return &this
}

// NewMixedrealityDeleteObservationsRequestWithDefaults instantiates a new MixedrealityDeleteObservationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityDeleteObservationsRequestWithDefaults() *MixedrealityDeleteObservationsRequest {
	this := MixedrealityDeleteObservationsRequest{}
	return &this
}

// GetObservations returns the Observations field value if set, zero value otherwise.
func (o *MixedrealityDeleteObservationsRequest) GetObservations() []string {
	if o == nil || o.Observations == nil {
		var ret []string
		return ret
	}
	return *o.Observations
}

// GetObservationsOk returns a tuple with the Observations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityDeleteObservationsRequest) GetObservationsOk() (*[]string, bool) {
	if o == nil || o.Observations == nil {
		return nil, false
	}
	return o.Observations, true
}

// HasObservations returns a boolean if a field has been set.
func (o *MixedrealityDeleteObservationsRequest) HasObservations() bool {
	if o != nil && o.Observations != nil {
		return true
	}

	return false
}

// SetObservations gets a reference to the given []string and assigns it to the Observations field.
func (o *MixedrealityDeleteObservationsRequest) SetObservations(v []string) {
	o.Observations = &v
}

func (o MixedrealityDeleteObservationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Observations != nil {
		toSerialize["observations"] = o.Observations
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityDeleteObservationsRequest struct {
	value *MixedrealityDeleteObservationsRequest
	isSet bool
}

func (v NullableMixedrealityDeleteObservationsRequest) Get() *MixedrealityDeleteObservationsRequest {
	return v.value
}

func (v *NullableMixedrealityDeleteObservationsRequest) Set(val *MixedrealityDeleteObservationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityDeleteObservationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityDeleteObservationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityDeleteObservationsRequest(val *MixedrealityDeleteObservationsRequest) *NullableMixedrealityDeleteObservationsRequest {
	return &NullableMixedrealityDeleteObservationsRequest{value: val, isSet: true}
}

func (v NullableMixedrealityDeleteObservationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityDeleteObservationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


