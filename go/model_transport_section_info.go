/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportSectionInfo struct for TransportSectionInfo
type TransportSectionInfo struct {
	Time *float64 `json:"time,omitempty"`
	Index *string `json:"index,omitempty"`
}

// NewTransportSectionInfo instantiates a new TransportSectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportSectionInfo() *TransportSectionInfo {
	this := TransportSectionInfo{}
	return &this
}

// NewTransportSectionInfoWithDefaults instantiates a new TransportSectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportSectionInfoWithDefaults() *TransportSectionInfo {
	this := TransportSectionInfo{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TransportSectionInfo) GetTime() float64 {
	if o == nil || o.Time == nil {
		var ret float64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSectionInfo) GetTimeOk() (*float64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TransportSectionInfo) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float64 and assigns it to the Time field.
func (o *TransportSectionInfo) SetTime(v float64) {
	o.Time = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *TransportSectionInfo) GetIndex() string {
	if o == nil || o.Index == nil {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSectionInfo) GetIndexOk() (*string, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *TransportSectionInfo) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *TransportSectionInfo) SetIndex(v string) {
	o.Index = &v
}

func (o TransportSectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	return json.Marshal(toSerialize)
}

type NullableTransportSectionInfo struct {
	value *TransportSectionInfo
	isSet bool
}

func (v NullableTransportSectionInfo) Get() *TransportSectionInfo {
	return v.value
}

func (v *NullableTransportSectionInfo) Set(val *TransportSectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportSectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportSectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportSectionInfo(val *TransportSectionInfo) *NullableTransportSectionInfo {
	return &NullableTransportSectionInfo{value: val, isSet: true}
}

func (v NullableTransportSectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportSectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


