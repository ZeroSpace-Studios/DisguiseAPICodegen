/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// D3apiEmptyResponse struct for D3apiEmptyResponse
type D3apiEmptyResponse struct {
	Status *RpcStatus `json:"status,omitempty"`
}

// NewD3apiEmptyResponse instantiates a new D3apiEmptyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewD3apiEmptyResponse() *D3apiEmptyResponse {
	this := D3apiEmptyResponse{}
	return &this
}

// NewD3apiEmptyResponseWithDefaults instantiates a new D3apiEmptyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewD3apiEmptyResponseWithDefaults() *D3apiEmptyResponse {
	this := D3apiEmptyResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *D3apiEmptyResponse) GetStatus() RpcStatus {
	if o == nil || o.Status == nil {
		var ret RpcStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *D3apiEmptyResponse) GetStatusOk() (*RpcStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *D3apiEmptyResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RpcStatus and assigns it to the Status field.
func (o *D3apiEmptyResponse) SetStatus(v RpcStatus) {
	o.Status = &v
}

func (o D3apiEmptyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableD3apiEmptyResponse struct {
	value *D3apiEmptyResponse
	isSet bool
}

func (v NullableD3apiEmptyResponse) Get() *D3apiEmptyResponse {
	return v.value
}

func (v *NullableD3apiEmptyResponse) Set(val *D3apiEmptyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableD3apiEmptyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableD3apiEmptyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableD3apiEmptyResponse(val *D3apiEmptyResponse) *NullableD3apiEmptyResponse {
	return &NullableD3apiEmptyResponse{value: val, isSet: true}
}

func (v NullableD3apiEmptyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableD3apiEmptyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


