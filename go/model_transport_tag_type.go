/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransportTagType the model 'TransportTagType'
type TransportTagType string

// List of transportTagType
const (
	TAG_TYPE_UNKNOWN TransportTagType = "TagType_Unknown"
	TC TransportTagType = "TC"
	MIDI TransportTagType = "MIDI"
	CUE TransportTagType = "CUE"
)

// All allowed values of TransportTagType enum
var AllowedTransportTagTypeEnumValues = []TransportTagType{
	"TagType_Unknown",
	"TC",
	"MIDI",
	"CUE",
}

func (v *TransportTagType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransportTagType(value)
	for _, existing := range AllowedTransportTagTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransportTagType", value)
}

// NewTransportTagTypeFromValue returns a pointer to a valid TransportTagType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransportTagTypeFromValue(v string) (*TransportTagType, error) {
	ev := TransportTagType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransportTagType: valid values are %v", v, AllowedTransportTagTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransportTagType) IsValid() bool {
	for _, existing := range AllowedTransportTagTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transportTagType value
func (v TransportTagType) Ptr() *TransportTagType {
	return &v
}

type NullableTransportTagType struct {
	value *TransportTagType
	isSet bool
}

func (v NullableTransportTagType) Get() *TransportTagType {
	return v.value
}

func (v *NullableTransportTagType) Set(val *TransportTagType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportTagType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportTagType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportTagType(val *TransportTagType) *NullableTransportTagType {
	return &NullableTransportTagType{value: val, isSet: true}
}

func (v NullableTransportTagType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportTagType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

