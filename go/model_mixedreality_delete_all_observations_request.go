/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityDeleteAllObservationsRequest struct for MixedrealityDeleteAllObservationsRequest
type MixedrealityDeleteAllObservationsRequest struct {
	SpatialCalibration *D3apiLocator `json:"spatialCalibration,omitempty"`
}

// NewMixedrealityDeleteAllObservationsRequest instantiates a new MixedrealityDeleteAllObservationsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityDeleteAllObservationsRequest() *MixedrealityDeleteAllObservationsRequest {
	this := MixedrealityDeleteAllObservationsRequest{}
	return &this
}

// NewMixedrealityDeleteAllObservationsRequestWithDefaults instantiates a new MixedrealityDeleteAllObservationsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityDeleteAllObservationsRequestWithDefaults() *MixedrealityDeleteAllObservationsRequest {
	this := MixedrealityDeleteAllObservationsRequest{}
	return &this
}

// GetSpatialCalibration returns the SpatialCalibration field value if set, zero value otherwise.
func (o *MixedrealityDeleteAllObservationsRequest) GetSpatialCalibration() D3apiLocator {
	if o == nil || o.SpatialCalibration == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.SpatialCalibration
}

// GetSpatialCalibrationOk returns a tuple with the SpatialCalibration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityDeleteAllObservationsRequest) GetSpatialCalibrationOk() (*D3apiLocator, bool) {
	if o == nil || o.SpatialCalibration == nil {
		return nil, false
	}
	return o.SpatialCalibration, true
}

// HasSpatialCalibration returns a boolean if a field has been set.
func (o *MixedrealityDeleteAllObservationsRequest) HasSpatialCalibration() bool {
	if o != nil && o.SpatialCalibration != nil {
		return true
	}

	return false
}

// SetSpatialCalibration gets a reference to the given D3apiLocator and assigns it to the SpatialCalibration field.
func (o *MixedrealityDeleteAllObservationsRequest) SetSpatialCalibration(v D3apiLocator) {
	o.SpatialCalibration = &v
}

func (o MixedrealityDeleteAllObservationsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SpatialCalibration != nil {
		toSerialize["spatialCalibration"] = o.SpatialCalibration
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityDeleteAllObservationsRequest struct {
	value *MixedrealityDeleteAllObservationsRequest
	isSet bool
}

func (v NullableMixedrealityDeleteAllObservationsRequest) Get() *MixedrealityDeleteAllObservationsRequest {
	return v.value
}

func (v *NullableMixedrealityDeleteAllObservationsRequest) Set(val *MixedrealityDeleteAllObservationsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityDeleteAllObservationsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityDeleteAllObservationsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityDeleteAllObservationsRequest(val *MixedrealityDeleteAllObservationsRequest) *NullableMixedrealityDeleteAllObservationsRequest {
	return &NullableMixedrealityDeleteAllObservationsRequest{value: val, isSet: true}
}

func (v NullableMixedrealityDeleteAllObservationsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityDeleteAllObservationsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


