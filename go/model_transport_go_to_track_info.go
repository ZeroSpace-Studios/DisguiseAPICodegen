/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportGoToTrackInfo struct for TransportGoToTrackInfo
type TransportGoToTrackInfo struct {
	Transport *D3apiLocator `json:"transport,omitempty"`
	Track *D3apiLocator `json:"track,omitempty"`
	Playmode *TransportAPIPlayMode `json:"playmode,omitempty"`
}

// NewTransportGoToTrackInfo instantiates a new TransportGoToTrackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportGoToTrackInfo() *TransportGoToTrackInfo {
	this := TransportGoToTrackInfo{}
	var playmode TransportAPIPlayMode = NOT_SET
	this.Playmode = &playmode
	return &this
}

// NewTransportGoToTrackInfoWithDefaults instantiates a new TransportGoToTrackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportGoToTrackInfoWithDefaults() *TransportGoToTrackInfo {
	this := TransportGoToTrackInfo{}
	var playmode TransportAPIPlayMode = NOT_SET
	this.Playmode = &playmode
	return &this
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *TransportGoToTrackInfo) GetTransport() D3apiLocator {
	if o == nil || o.Transport == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGoToTrackInfo) GetTransportOk() (*D3apiLocator, bool) {
	if o == nil || o.Transport == nil {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *TransportGoToTrackInfo) HasTransport() bool {
	if o != nil && o.Transport != nil {
		return true
	}

	return false
}

// SetTransport gets a reference to the given D3apiLocator and assigns it to the Transport field.
func (o *TransportGoToTrackInfo) SetTransport(v D3apiLocator) {
	o.Transport = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *TransportGoToTrackInfo) GetTrack() D3apiLocator {
	if o == nil || o.Track == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGoToTrackInfo) GetTrackOk() (*D3apiLocator, bool) {
	if o == nil || o.Track == nil {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *TransportGoToTrackInfo) HasTrack() bool {
	if o != nil && o.Track != nil {
		return true
	}

	return false
}

// SetTrack gets a reference to the given D3apiLocator and assigns it to the Track field.
func (o *TransportGoToTrackInfo) SetTrack(v D3apiLocator) {
	o.Track = &v
}

// GetPlaymode returns the Playmode field value if set, zero value otherwise.
func (o *TransportGoToTrackInfo) GetPlaymode() TransportAPIPlayMode {
	if o == nil || o.Playmode == nil {
		var ret TransportAPIPlayMode
		return ret
	}
	return *o.Playmode
}

// GetPlaymodeOk returns a tuple with the Playmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGoToTrackInfo) GetPlaymodeOk() (*TransportAPIPlayMode, bool) {
	if o == nil || o.Playmode == nil {
		return nil, false
	}
	return o.Playmode, true
}

// HasPlaymode returns a boolean if a field has been set.
func (o *TransportGoToTrackInfo) HasPlaymode() bool {
	if o != nil && o.Playmode != nil {
		return true
	}

	return false
}

// SetPlaymode gets a reference to the given TransportAPIPlayMode and assigns it to the Playmode field.
func (o *TransportGoToTrackInfo) SetPlaymode(v TransportAPIPlayMode) {
	o.Playmode = &v
}

func (o TransportGoToTrackInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transport != nil {
		toSerialize["transport"] = o.Transport
	}
	if o.Track != nil {
		toSerialize["track"] = o.Track
	}
	if o.Playmode != nil {
		toSerialize["playmode"] = o.Playmode
	}
	return json.Marshal(toSerialize)
}

type NullableTransportGoToTrackInfo struct {
	value *TransportGoToTrackInfo
	isSet bool
}

func (v NullableTransportGoToTrackInfo) Get() *TransportGoToTrackInfo {
	return v.value
}

func (v *NullableTransportGoToTrackInfo) Set(val *TransportGoToTrackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportGoToTrackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportGoToTrackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportGoToTrackInfo(val *TransportGoToTrackInfo) *NullableTransportGoToTrackInfo {
	return &NullableTransportGoToTrackInfo{value: val, isSet: true}
}

func (v NullableTransportGoToTrackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportGoToTrackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


