/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StatusHealthReport struct for StatusHealthReport
type StatusHealthReport struct {
	Machine *Statusd3Machine `json:"machine,omitempty"`
	RunningAsMachine *Statusd3Machine `json:"runningAsMachine,omitempty"`
	Status *StatusHealthStatus `json:"status,omitempty"`
}

// NewStatusHealthReport instantiates a new StatusHealthReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusHealthReport() *StatusHealthReport {
	this := StatusHealthReport{}
	return &this
}

// NewStatusHealthReportWithDefaults instantiates a new StatusHealthReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusHealthReportWithDefaults() *StatusHealthReport {
	this := StatusHealthReport{}
	return &this
}

// GetMachine returns the Machine field value if set, zero value otherwise.
func (o *StatusHealthReport) GetMachine() Statusd3Machine {
	if o == nil || o.Machine == nil {
		var ret Statusd3Machine
		return ret
	}
	return *o.Machine
}

// GetMachineOk returns a tuple with the Machine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthReport) GetMachineOk() (*Statusd3Machine, bool) {
	if o == nil || o.Machine == nil {
		return nil, false
	}
	return o.Machine, true
}

// HasMachine returns a boolean if a field has been set.
func (o *StatusHealthReport) HasMachine() bool {
	if o != nil && o.Machine != nil {
		return true
	}

	return false
}

// SetMachine gets a reference to the given Statusd3Machine and assigns it to the Machine field.
func (o *StatusHealthReport) SetMachine(v Statusd3Machine) {
	o.Machine = &v
}

// GetRunningAsMachine returns the RunningAsMachine field value if set, zero value otherwise.
func (o *StatusHealthReport) GetRunningAsMachine() Statusd3Machine {
	if o == nil || o.RunningAsMachine == nil {
		var ret Statusd3Machine
		return ret
	}
	return *o.RunningAsMachine
}

// GetRunningAsMachineOk returns a tuple with the RunningAsMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthReport) GetRunningAsMachineOk() (*Statusd3Machine, bool) {
	if o == nil || o.RunningAsMachine == nil {
		return nil, false
	}
	return o.RunningAsMachine, true
}

// HasRunningAsMachine returns a boolean if a field has been set.
func (o *StatusHealthReport) HasRunningAsMachine() bool {
	if o != nil && o.RunningAsMachine != nil {
		return true
	}

	return false
}

// SetRunningAsMachine gets a reference to the given Statusd3Machine and assigns it to the RunningAsMachine field.
func (o *StatusHealthReport) SetRunningAsMachine(v Statusd3Machine) {
	o.RunningAsMachine = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StatusHealthReport) GetStatus() StatusHealthStatus {
	if o == nil || o.Status == nil {
		var ret StatusHealthStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusHealthReport) GetStatusOk() (*StatusHealthStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StatusHealthReport) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusHealthStatus and assigns it to the Status field.
func (o *StatusHealthReport) SetStatus(v StatusHealthStatus) {
	o.Status = &v
}

func (o StatusHealthReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Machine != nil {
		toSerialize["machine"] = o.Machine
	}
	if o.RunningAsMachine != nil {
		toSerialize["runningAsMachine"] = o.RunningAsMachine
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableStatusHealthReport struct {
	value *StatusHealthReport
	isSet bool
}

func (v NullableStatusHealthReport) Get() *StatusHealthReport {
	return v.value
}

func (v *NullableStatusHealthReport) Set(val *StatusHealthReport) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusHealthReport) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusHealthReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusHealthReport(val *StatusHealthReport) *NullableStatusHealthReport {
	return &NullableStatusHealthReport{value: val, isSet: true}
}

func (v NullableStatusHealthReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusHealthReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


