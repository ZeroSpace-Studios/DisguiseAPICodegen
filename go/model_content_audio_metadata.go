/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContentAudioMetadata struct for ContentAudioMetadata
type ContentAudioMetadata struct {
	SampleRate *int64 `json:"sampleRate,omitempty"`
	NChannels *int64 `json:"nChannels,omitempty"`
	NSamples *int64 `json:"nSamples,omitempty"`
	CodecName *string `json:"codecName,omitempty"`
	CodecInfo *string `json:"codecInfo,omitempty"`
}

// NewContentAudioMetadata instantiates a new ContentAudioMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentAudioMetadata() *ContentAudioMetadata {
	this := ContentAudioMetadata{}
	return &this
}

// NewContentAudioMetadataWithDefaults instantiates a new ContentAudioMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentAudioMetadataWithDefaults() *ContentAudioMetadata {
	this := ContentAudioMetadata{}
	return &this
}

// GetSampleRate returns the SampleRate field value if set, zero value otherwise.
func (o *ContentAudioMetadata) GetSampleRate() int64 {
	if o == nil || o.SampleRate == nil {
		var ret int64
		return ret
	}
	return *o.SampleRate
}

// GetSampleRateOk returns a tuple with the SampleRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAudioMetadata) GetSampleRateOk() (*int64, bool) {
	if o == nil || o.SampleRate == nil {
		return nil, false
	}
	return o.SampleRate, true
}

// HasSampleRate returns a boolean if a field has been set.
func (o *ContentAudioMetadata) HasSampleRate() bool {
	if o != nil && o.SampleRate != nil {
		return true
	}

	return false
}

// SetSampleRate gets a reference to the given int64 and assigns it to the SampleRate field.
func (o *ContentAudioMetadata) SetSampleRate(v int64) {
	o.SampleRate = &v
}

// GetNChannels returns the NChannels field value if set, zero value otherwise.
func (o *ContentAudioMetadata) GetNChannels() int64 {
	if o == nil || o.NChannels == nil {
		var ret int64
		return ret
	}
	return *o.NChannels
}

// GetNChannelsOk returns a tuple with the NChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAudioMetadata) GetNChannelsOk() (*int64, bool) {
	if o == nil || o.NChannels == nil {
		return nil, false
	}
	return o.NChannels, true
}

// HasNChannels returns a boolean if a field has been set.
func (o *ContentAudioMetadata) HasNChannels() bool {
	if o != nil && o.NChannels != nil {
		return true
	}

	return false
}

// SetNChannels gets a reference to the given int64 and assigns it to the NChannels field.
func (o *ContentAudioMetadata) SetNChannels(v int64) {
	o.NChannels = &v
}

// GetNSamples returns the NSamples field value if set, zero value otherwise.
func (o *ContentAudioMetadata) GetNSamples() int64 {
	if o == nil || o.NSamples == nil {
		var ret int64
		return ret
	}
	return *o.NSamples
}

// GetNSamplesOk returns a tuple with the NSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAudioMetadata) GetNSamplesOk() (*int64, bool) {
	if o == nil || o.NSamples == nil {
		return nil, false
	}
	return o.NSamples, true
}

// HasNSamples returns a boolean if a field has been set.
func (o *ContentAudioMetadata) HasNSamples() bool {
	if o != nil && o.NSamples != nil {
		return true
	}

	return false
}

// SetNSamples gets a reference to the given int64 and assigns it to the NSamples field.
func (o *ContentAudioMetadata) SetNSamples(v int64) {
	o.NSamples = &v
}

// GetCodecName returns the CodecName field value if set, zero value otherwise.
func (o *ContentAudioMetadata) GetCodecName() string {
	if o == nil || o.CodecName == nil {
		var ret string
		return ret
	}
	return *o.CodecName
}

// GetCodecNameOk returns a tuple with the CodecName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAudioMetadata) GetCodecNameOk() (*string, bool) {
	if o == nil || o.CodecName == nil {
		return nil, false
	}
	return o.CodecName, true
}

// HasCodecName returns a boolean if a field has been set.
func (o *ContentAudioMetadata) HasCodecName() bool {
	if o != nil && o.CodecName != nil {
		return true
	}

	return false
}

// SetCodecName gets a reference to the given string and assigns it to the CodecName field.
func (o *ContentAudioMetadata) SetCodecName(v string) {
	o.CodecName = &v
}

// GetCodecInfo returns the CodecInfo field value if set, zero value otherwise.
func (o *ContentAudioMetadata) GetCodecInfo() string {
	if o == nil || o.CodecInfo == nil {
		var ret string
		return ret
	}
	return *o.CodecInfo
}

// GetCodecInfoOk returns a tuple with the CodecInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentAudioMetadata) GetCodecInfoOk() (*string, bool) {
	if o == nil || o.CodecInfo == nil {
		return nil, false
	}
	return o.CodecInfo, true
}

// HasCodecInfo returns a boolean if a field has been set.
func (o *ContentAudioMetadata) HasCodecInfo() bool {
	if o != nil && o.CodecInfo != nil {
		return true
	}

	return false
}

// SetCodecInfo gets a reference to the given string and assigns it to the CodecInfo field.
func (o *ContentAudioMetadata) SetCodecInfo(v string) {
	o.CodecInfo = &v
}

func (o ContentAudioMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SampleRate != nil {
		toSerialize["sampleRate"] = o.SampleRate
	}
	if o.NChannels != nil {
		toSerialize["nChannels"] = o.NChannels
	}
	if o.NSamples != nil {
		toSerialize["nSamples"] = o.NSamples
	}
	if o.CodecName != nil {
		toSerialize["codecName"] = o.CodecName
	}
	if o.CodecInfo != nil {
		toSerialize["codecInfo"] = o.CodecInfo
	}
	return json.Marshal(toSerialize)
}

type NullableContentAudioMetadata struct {
	value *ContentAudioMetadata
	isSet bool
}

func (v NullableContentAudioMetadata) Get() *ContentAudioMetadata {
	return v.value
}

func (v *NullableContentAudioMetadata) Set(val *ContentAudioMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableContentAudioMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableContentAudioMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentAudioMetadata(val *ContentAudioMetadata) *NullableContentAudioMetadata {
	return &NullableContentAudioMetadata{value: val, isSet: true}
}

func (v NullableContentAudioMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentAudioMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


