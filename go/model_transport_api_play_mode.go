/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransportAPIPlayMode the model 'TransportAPIPlayMode'
type TransportAPIPlayMode string

// List of transportAPIPlayMode
const (
	NOT_SET TransportAPIPlayMode = "NotSet"
	PLAY TransportAPIPlayMode = "Play"
	PLAY_SECTION TransportAPIPlayMode = "PlaySection"
	LOOP TransportAPIPlayMode = "Loop"
	STOP TransportAPIPlayMode = "Stop"
	UNKNOWN TransportAPIPlayMode = "Unknown"
)

// All allowed values of TransportAPIPlayMode enum
var AllowedTransportAPIPlayModeEnumValues = []TransportAPIPlayMode{
	"NotSet",
	"Play",
	"PlaySection",
	"Loop",
	"Stop",
	"Unknown",
}

func (v *TransportAPIPlayMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransportAPIPlayMode(value)
	for _, existing := range AllowedTransportAPIPlayModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransportAPIPlayMode", value)
}

// NewTransportAPIPlayModeFromValue returns a pointer to a valid TransportAPIPlayMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransportAPIPlayModeFromValue(v string) (*TransportAPIPlayMode, error) {
	ev := TransportAPIPlayMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransportAPIPlayMode: valid values are %v", v, AllowedTransportAPIPlayModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransportAPIPlayMode) IsValid() bool {
	for _, existing := range AllowedTransportAPIPlayModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transportAPIPlayMode value
func (v TransportAPIPlayMode) Ptr() *TransportAPIPlayMode {
	return &v
}

type NullableTransportAPIPlayMode struct {
	value *TransportAPIPlayMode
	isSet bool
}

func (v NullableTransportAPIPlayMode) Get() *TransportAPIPlayMode {
	return v.value
}

func (v *NullableTransportAPIPlayMode) Set(val *TransportAPIPlayMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportAPIPlayMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportAPIPlayMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportAPIPlayMode(val *TransportAPIPlayMode) *NullableTransportAPIPlayMode {
	return &NullableTransportAPIPlayMode{value: val, isSet: true}
}

func (v NullableTransportAPIPlayMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportAPIPlayMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

