/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealitySelectCameraRequest struct for MixedrealitySelectCameraRequest
type MixedrealitySelectCameraRequest struct {
	MrSet *D3apiLocator `json:"mrSet,omitempty"`
	CameraOverride *D3apiLocator `json:"cameraOverride,omitempty"`
}

// NewMixedrealitySelectCameraRequest instantiates a new MixedrealitySelectCameraRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealitySelectCameraRequest() *MixedrealitySelectCameraRequest {
	this := MixedrealitySelectCameraRequest{}
	return &this
}

// NewMixedrealitySelectCameraRequestWithDefaults instantiates a new MixedrealitySelectCameraRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealitySelectCameraRequestWithDefaults() *MixedrealitySelectCameraRequest {
	this := MixedrealitySelectCameraRequest{}
	return &this
}

// GetMrSet returns the MrSet field value if set, zero value otherwise.
func (o *MixedrealitySelectCameraRequest) GetMrSet() D3apiLocator {
	if o == nil || o.MrSet == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.MrSet
}

// GetMrSetOk returns a tuple with the MrSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealitySelectCameraRequest) GetMrSetOk() (*D3apiLocator, bool) {
	if o == nil || o.MrSet == nil {
		return nil, false
	}
	return o.MrSet, true
}

// HasMrSet returns a boolean if a field has been set.
func (o *MixedrealitySelectCameraRequest) HasMrSet() bool {
	if o != nil && o.MrSet != nil {
		return true
	}

	return false
}

// SetMrSet gets a reference to the given D3apiLocator and assigns it to the MrSet field.
func (o *MixedrealitySelectCameraRequest) SetMrSet(v D3apiLocator) {
	o.MrSet = &v
}

// GetCameraOverride returns the CameraOverride field value if set, zero value otherwise.
func (o *MixedrealitySelectCameraRequest) GetCameraOverride() D3apiLocator {
	if o == nil || o.CameraOverride == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.CameraOverride
}

// GetCameraOverrideOk returns a tuple with the CameraOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealitySelectCameraRequest) GetCameraOverrideOk() (*D3apiLocator, bool) {
	if o == nil || o.CameraOverride == nil {
		return nil, false
	}
	return o.CameraOverride, true
}

// HasCameraOverride returns a boolean if a field has been set.
func (o *MixedrealitySelectCameraRequest) HasCameraOverride() bool {
	if o != nil && o.CameraOverride != nil {
		return true
	}

	return false
}

// SetCameraOverride gets a reference to the given D3apiLocator and assigns it to the CameraOverride field.
func (o *MixedrealitySelectCameraRequest) SetCameraOverride(v D3apiLocator) {
	o.CameraOverride = &v
}

func (o MixedrealitySelectCameraRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MrSet != nil {
		toSerialize["mrSet"] = o.MrSet
	}
	if o.CameraOverride != nil {
		toSerialize["cameraOverride"] = o.CameraOverride
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealitySelectCameraRequest struct {
	value *MixedrealitySelectCameraRequest
	isSet bool
}

func (v NullableMixedrealitySelectCameraRequest) Get() *MixedrealitySelectCameraRequest {
	return v.value
}

func (v *NullableMixedrealitySelectCameraRequest) Set(val *MixedrealitySelectCameraRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealitySelectCameraRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealitySelectCameraRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealitySelectCameraRequest(val *MixedrealitySelectCameraRequest) *NullableMixedrealitySelectCameraRequest {
	return &NullableMixedrealitySelectCameraRequest{value: val, isSet: true}
}

func (v NullableMixedrealitySelectCameraRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealitySelectCameraRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


