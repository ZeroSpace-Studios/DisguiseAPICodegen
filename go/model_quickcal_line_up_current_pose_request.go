/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QuickcalLineUpCurrentPoseRequest struct for QuickcalLineUpCurrentPoseRequest
type QuickcalLineUpCurrentPoseRequest struct {
	Projector *D3apiLocator `json:"projector,omitempty"`
	ReferencePoint *D3apiLocator `json:"referencePoint,omitempty"`
	Position *D3apiVec2Float `json:"position,omitempty"`
}

// NewQuickcalLineUpCurrentPoseRequest instantiates a new QuickcalLineUpCurrentPoseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickcalLineUpCurrentPoseRequest() *QuickcalLineUpCurrentPoseRequest {
	this := QuickcalLineUpCurrentPoseRequest{}
	return &this
}

// NewQuickcalLineUpCurrentPoseRequestWithDefaults instantiates a new QuickcalLineUpCurrentPoseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickcalLineUpCurrentPoseRequestWithDefaults() *QuickcalLineUpCurrentPoseRequest {
	this := QuickcalLineUpCurrentPoseRequest{}
	return &this
}

// GetProjector returns the Projector field value if set, zero value otherwise.
func (o *QuickcalLineUpCurrentPoseRequest) GetProjector() D3apiLocator {
	if o == nil || o.Projector == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Projector
}

// GetProjectorOk returns a tuple with the Projector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickcalLineUpCurrentPoseRequest) GetProjectorOk() (*D3apiLocator, bool) {
	if o == nil || o.Projector == nil {
		return nil, false
	}
	return o.Projector, true
}

// HasProjector returns a boolean if a field has been set.
func (o *QuickcalLineUpCurrentPoseRequest) HasProjector() bool {
	if o != nil && o.Projector != nil {
		return true
	}

	return false
}

// SetProjector gets a reference to the given D3apiLocator and assigns it to the Projector field.
func (o *QuickcalLineUpCurrentPoseRequest) SetProjector(v D3apiLocator) {
	o.Projector = &v
}

// GetReferencePoint returns the ReferencePoint field value if set, zero value otherwise.
func (o *QuickcalLineUpCurrentPoseRequest) GetReferencePoint() D3apiLocator {
	if o == nil || o.ReferencePoint == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.ReferencePoint
}

// GetReferencePointOk returns a tuple with the ReferencePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickcalLineUpCurrentPoseRequest) GetReferencePointOk() (*D3apiLocator, bool) {
	if o == nil || o.ReferencePoint == nil {
		return nil, false
	}
	return o.ReferencePoint, true
}

// HasReferencePoint returns a boolean if a field has been set.
func (o *QuickcalLineUpCurrentPoseRequest) HasReferencePoint() bool {
	if o != nil && o.ReferencePoint != nil {
		return true
	}

	return false
}

// SetReferencePoint gets a reference to the given D3apiLocator and assigns it to the ReferencePoint field.
func (o *QuickcalLineUpCurrentPoseRequest) SetReferencePoint(v D3apiLocator) {
	o.ReferencePoint = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *QuickcalLineUpCurrentPoseRequest) GetPosition() D3apiVec2Float {
	if o == nil || o.Position == nil {
		var ret D3apiVec2Float
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickcalLineUpCurrentPoseRequest) GetPositionOk() (*D3apiVec2Float, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *QuickcalLineUpCurrentPoseRequest) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given D3apiVec2Float and assigns it to the Position field.
func (o *QuickcalLineUpCurrentPoseRequest) SetPosition(v D3apiVec2Float) {
	o.Position = &v
}

func (o QuickcalLineUpCurrentPoseRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projector != nil {
		toSerialize["projector"] = o.Projector
	}
	if o.ReferencePoint != nil {
		toSerialize["referencePoint"] = o.ReferencePoint
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	return json.Marshal(toSerialize)
}

type NullableQuickcalLineUpCurrentPoseRequest struct {
	value *QuickcalLineUpCurrentPoseRequest
	isSet bool
}

func (v NullableQuickcalLineUpCurrentPoseRequest) Get() *QuickcalLineUpCurrentPoseRequest {
	return v.value
}

func (v *NullableQuickcalLineUpCurrentPoseRequest) Set(val *QuickcalLineUpCurrentPoseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickcalLineUpCurrentPoseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickcalLineUpCurrentPoseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickcalLineUpCurrentPoseRequest(val *QuickcalLineUpCurrentPoseRequest) *NullableQuickcalLineUpCurrentPoseRequest {
	return &NullableQuickcalLineUpCurrentPoseRequest{value: val, isSet: true}
}

func (v NullableQuickcalLineUpCurrentPoseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickcalLineUpCurrentPoseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


