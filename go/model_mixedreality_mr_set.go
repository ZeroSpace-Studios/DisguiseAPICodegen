/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityMRSet struct for MixedrealityMRSet
type MixedrealityMRSet struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	CurrentCamera *MixedrealityCameraIdentityInfo `json:"currentCamera,omitempty"`
	IsCameraOverride *bool `json:"isCameraOverride,omitempty"`
}

// NewMixedrealityMRSet instantiates a new MixedrealityMRSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityMRSet() *MixedrealityMRSet {
	this := MixedrealityMRSet{}
	return &this
}

// NewMixedrealityMRSetWithDefaults instantiates a new MixedrealityMRSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityMRSetWithDefaults() *MixedrealityMRSet {
	this := MixedrealityMRSet{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *MixedrealityMRSet) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityMRSet) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *MixedrealityMRSet) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *MixedrealityMRSet) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MixedrealityMRSet) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityMRSet) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MixedrealityMRSet) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MixedrealityMRSet) SetName(v string) {
	o.Name = &v
}

// GetCurrentCamera returns the CurrentCamera field value if set, zero value otherwise.
func (o *MixedrealityMRSet) GetCurrentCamera() MixedrealityCameraIdentityInfo {
	if o == nil || o.CurrentCamera == nil {
		var ret MixedrealityCameraIdentityInfo
		return ret
	}
	return *o.CurrentCamera
}

// GetCurrentCameraOk returns a tuple with the CurrentCamera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityMRSet) GetCurrentCameraOk() (*MixedrealityCameraIdentityInfo, bool) {
	if o == nil || o.CurrentCamera == nil {
		return nil, false
	}
	return o.CurrentCamera, true
}

// HasCurrentCamera returns a boolean if a field has been set.
func (o *MixedrealityMRSet) HasCurrentCamera() bool {
	if o != nil && o.CurrentCamera != nil {
		return true
	}

	return false
}

// SetCurrentCamera gets a reference to the given MixedrealityCameraIdentityInfo and assigns it to the CurrentCamera field.
func (o *MixedrealityMRSet) SetCurrentCamera(v MixedrealityCameraIdentityInfo) {
	o.CurrentCamera = &v
}

// GetIsCameraOverride returns the IsCameraOverride field value if set, zero value otherwise.
func (o *MixedrealityMRSet) GetIsCameraOverride() bool {
	if o == nil || o.IsCameraOverride == nil {
		var ret bool
		return ret
	}
	return *o.IsCameraOverride
}

// GetIsCameraOverrideOk returns a tuple with the IsCameraOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityMRSet) GetIsCameraOverrideOk() (*bool, bool) {
	if o == nil || o.IsCameraOverride == nil {
		return nil, false
	}
	return o.IsCameraOverride, true
}

// HasIsCameraOverride returns a boolean if a field has been set.
func (o *MixedrealityMRSet) HasIsCameraOverride() bool {
	if o != nil && o.IsCameraOverride != nil {
		return true
	}

	return false
}

// SetIsCameraOverride gets a reference to the given bool and assigns it to the IsCameraOverride field.
func (o *MixedrealityMRSet) SetIsCameraOverride(v bool) {
	o.IsCameraOverride = &v
}

func (o MixedrealityMRSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CurrentCamera != nil {
		toSerialize["currentCamera"] = o.CurrentCamera
	}
	if o.IsCameraOverride != nil {
		toSerialize["isCameraOverride"] = o.IsCameraOverride
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityMRSet struct {
	value *MixedrealityMRSet
	isSet bool
}

func (v NullableMixedrealityMRSet) Get() *MixedrealityMRSet {
	return v.value
}

func (v *NullableMixedrealityMRSet) Set(val *MixedrealityMRSet) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityMRSet) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityMRSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityMRSet(val *MixedrealityMRSet) *NullableMixedrealityMRSet {
	return &NullableMixedrealityMRSet{value: val, isSet: true}
}

func (v NullableMixedrealityMRSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityMRSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


