/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportSetListInfo struct for TransportSetListInfo
type TransportSetListInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	Tracks *[]TransportTrackInfo `json:"tracks,omitempty"`
}

// NewTransportSetListInfo instantiates a new TransportSetListInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportSetListInfo() *TransportSetListInfo {
	this := TransportSetListInfo{}
	return &this
}

// NewTransportSetListInfoWithDefaults instantiates a new TransportSetListInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportSetListInfoWithDefaults() *TransportSetListInfo {
	this := TransportSetListInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *TransportSetListInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSetListInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *TransportSetListInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *TransportSetListInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransportSetListInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSetListInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransportSetListInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TransportSetListInfo) SetName(v string) {
	o.Name = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *TransportSetListInfo) GetTracks() []TransportTrackInfo {
	if o == nil || o.Tracks == nil {
		var ret []TransportTrackInfo
		return ret
	}
	return *o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportSetListInfo) GetTracksOk() (*[]TransportTrackInfo, bool) {
	if o == nil || o.Tracks == nil {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *TransportSetListInfo) HasTracks() bool {
	if o != nil && o.Tracks != nil {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []TransportTrackInfo and assigns it to the Tracks field.
func (o *TransportSetListInfo) SetTracks(v []TransportTrackInfo) {
	o.Tracks = &v
}

func (o TransportSetListInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Tracks != nil {
		toSerialize["tracks"] = o.Tracks
	}
	return json.Marshal(toSerialize)
}

type NullableTransportSetListInfo struct {
	value *TransportSetListInfo
	isSet bool
}

func (v NullableTransportSetListInfo) Get() *TransportSetListInfo {
	return v.value
}

func (v *NullableTransportSetListInfo) Set(val *TransportSetListInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportSetListInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportSetListInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportSetListInfo(val *TransportSetListInfo) *NullableTransportSetListInfo {
	return &NullableTransportSetListInfo{value: val, isSet: true}
}

func (v NullableTransportSetListInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportSetListInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


