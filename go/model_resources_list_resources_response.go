/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourcesListResourcesResponse struct for ResourcesListResourcesResponse
type ResourcesListResourcesResponse struct {
	Result *[]ResourcesResourceInfo `json:"result,omitempty"`
}

// NewResourcesListResourcesResponse instantiates a new ResourcesListResourcesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcesListResourcesResponse() *ResourcesListResourcesResponse {
	this := ResourcesListResourcesResponse{}
	return &this
}

// NewResourcesListResourcesResponseWithDefaults instantiates a new ResourcesListResourcesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesListResourcesResponseWithDefaults() *ResourcesListResourcesResponse {
	this := ResourcesListResourcesResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ResourcesListResourcesResponse) GetResult() []ResourcesResourceInfo {
	if o == nil || o.Result == nil {
		var ret []ResourcesResourceInfo
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourcesListResourcesResponse) GetResultOk() (*[]ResourcesResourceInfo, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ResourcesListResourcesResponse) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given []ResourcesResourceInfo and assigns it to the Result field.
func (o *ResourcesListResourcesResponse) SetResult(v []ResourcesResourceInfo) {
	o.Result = &v
}

func (o ResourcesListResourcesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableResourcesListResourcesResponse struct {
	value *ResourcesListResourcesResponse
	isSet bool
}

func (v NullableResourcesListResourcesResponse) Get() *ResourcesListResourcesResponse {
	return v.value
}

func (v *NullableResourcesListResourcesResponse) Set(val *ResourcesListResourcesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesListResourcesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesListResourcesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesListResourcesResponse(val *ResourcesListResourcesResponse) *NullableResourcesListResourcesResponse {
	return &NullableResourcesListResourcesResponse{value: val, isSet: true}
}

func (v NullableResourcesListResourcesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesListResourcesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


