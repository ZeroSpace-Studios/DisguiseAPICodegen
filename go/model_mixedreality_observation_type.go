/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MixedrealityObservationType the model 'MixedrealityObservationType'
type MixedrealityObservationType string

// List of mixedrealityObservationType
const (
	PRIMARY MixedrealityObservationType = "Primary"
	SECONDARY MixedrealityObservationType = "Secondary"
)

// All allowed values of MixedrealityObservationType enum
var AllowedMixedrealityObservationTypeEnumValues = []MixedrealityObservationType{
	"Primary",
	"Secondary",
}

func (v *MixedrealityObservationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MixedrealityObservationType(value)
	for _, existing := range AllowedMixedrealityObservationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MixedrealityObservationType", value)
}

// NewMixedrealityObservationTypeFromValue returns a pointer to a valid MixedrealityObservationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixedrealityObservationTypeFromValue(v string) (*MixedrealityObservationType, error) {
	ev := MixedrealityObservationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MixedrealityObservationType: valid values are %v", v, AllowedMixedrealityObservationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MixedrealityObservationType) IsValid() bool {
	for _, existing := range AllowedMixedrealityObservationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to mixedrealityObservationType value
func (v MixedrealityObservationType) Ptr() *MixedrealityObservationType {
	return &v
}

type NullableMixedrealityObservationType struct {
	value *MixedrealityObservationType
	isSet bool
}

func (v NullableMixedrealityObservationType) Get() *MixedrealityObservationType {
	return v.value
}

func (v *NullableMixedrealityObservationType) Set(val *MixedrealityObservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityObservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityObservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityObservationType(val *MixedrealityObservationType) *NullableMixedrealityObservationType {
	return &NullableMixedrealityObservationType{value: val, isSet: true}
}

func (v NullableMixedrealityObservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityObservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

