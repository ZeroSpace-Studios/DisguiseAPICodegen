/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityCaptureObservationRequest struct for MixedrealityCaptureObservationRequest
type MixedrealityCaptureObservationRequest struct {
	Camera *D3apiLocator `json:"camera,omitempty"`
	SpatialCalibration *D3apiLocator `json:"spatialCalibration,omitempty"`
}

// NewMixedrealityCaptureObservationRequest instantiates a new MixedrealityCaptureObservationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityCaptureObservationRequest() *MixedrealityCaptureObservationRequest {
	this := MixedrealityCaptureObservationRequest{}
	return &this
}

// NewMixedrealityCaptureObservationRequestWithDefaults instantiates a new MixedrealityCaptureObservationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityCaptureObservationRequestWithDefaults() *MixedrealityCaptureObservationRequest {
	this := MixedrealityCaptureObservationRequest{}
	return &this
}

// GetCamera returns the Camera field value if set, zero value otherwise.
func (o *MixedrealityCaptureObservationRequest) GetCamera() D3apiLocator {
	if o == nil || o.Camera == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Camera
}

// GetCameraOk returns a tuple with the Camera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityCaptureObservationRequest) GetCameraOk() (*D3apiLocator, bool) {
	if o == nil || o.Camera == nil {
		return nil, false
	}
	return o.Camera, true
}

// HasCamera returns a boolean if a field has been set.
func (o *MixedrealityCaptureObservationRequest) HasCamera() bool {
	if o != nil && o.Camera != nil {
		return true
	}

	return false
}

// SetCamera gets a reference to the given D3apiLocator and assigns it to the Camera field.
func (o *MixedrealityCaptureObservationRequest) SetCamera(v D3apiLocator) {
	o.Camera = &v
}

// GetSpatialCalibration returns the SpatialCalibration field value if set, zero value otherwise.
func (o *MixedrealityCaptureObservationRequest) GetSpatialCalibration() D3apiLocator {
	if o == nil || o.SpatialCalibration == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.SpatialCalibration
}

// GetSpatialCalibrationOk returns a tuple with the SpatialCalibration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityCaptureObservationRequest) GetSpatialCalibrationOk() (*D3apiLocator, bool) {
	if o == nil || o.SpatialCalibration == nil {
		return nil, false
	}
	return o.SpatialCalibration, true
}

// HasSpatialCalibration returns a boolean if a field has been set.
func (o *MixedrealityCaptureObservationRequest) HasSpatialCalibration() bool {
	if o != nil && o.SpatialCalibration != nil {
		return true
	}

	return false
}

// SetSpatialCalibration gets a reference to the given D3apiLocator and assigns it to the SpatialCalibration field.
func (o *MixedrealityCaptureObservationRequest) SetSpatialCalibration(v D3apiLocator) {
	o.SpatialCalibration = &v
}

func (o MixedrealityCaptureObservationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Camera != nil {
		toSerialize["camera"] = o.Camera
	}
	if o.SpatialCalibration != nil {
		toSerialize["spatialCalibration"] = o.SpatialCalibration
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityCaptureObservationRequest struct {
	value *MixedrealityCaptureObservationRequest
	isSet bool
}

func (v NullableMixedrealityCaptureObservationRequest) Get() *MixedrealityCaptureObservationRequest {
	return v.value
}

func (v *NullableMixedrealityCaptureObservationRequest) Set(val *MixedrealityCaptureObservationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityCaptureObservationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityCaptureObservationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityCaptureObservationRequest(val *MixedrealityCaptureObservationRequest) *NullableMixedrealityCaptureObservationRequest {
	return &NullableMixedrealityCaptureObservationRequest{value: val, isSet: true}
}

func (v NullableMixedrealityCaptureObservationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityCaptureObservationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


