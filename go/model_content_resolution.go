/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContentResolution struct for ContentResolution
type ContentResolution struct {
	Width *int64 `json:"width,omitempty"`
	Height *int64 `json:"height,omitempty"`
}

// NewContentResolution instantiates a new ContentResolution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentResolution() *ContentResolution {
	this := ContentResolution{}
	return &this
}

// NewContentResolutionWithDefaults instantiates a new ContentResolution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentResolutionWithDefaults() *ContentResolution {
	this := ContentResolution{}
	return &this
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ContentResolution) GetWidth() int64 {
	if o == nil || o.Width == nil {
		var ret int64
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentResolution) GetWidthOk() (*int64, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ContentResolution) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int64 and assigns it to the Width field.
func (o *ContentResolution) SetWidth(v int64) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ContentResolution) GetHeight() int64 {
	if o == nil || o.Height == nil {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentResolution) GetHeightOk() (*int64, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ContentResolution) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *ContentResolution) SetHeight(v int64) {
	o.Height = &v
}

func (o ContentResolution) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}

type NullableContentResolution struct {
	value *ContentResolution
	isSet bool
}

func (v NullableContentResolution) Get() *ContentResolution {
	return v.value
}

func (v *NullableContentResolution) Set(val *ContentResolution) {
	v.value = val
	v.isSet = true
}

func (v NullableContentResolution) IsSet() bool {
	return v.isSet
}

func (v *NullableContentResolution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentResolution(val *ContentResolution) *NullableContentResolution {
	return &NullableContentResolution{value: val, isSet: true}
}

func (v NullableContentResolution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentResolution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


