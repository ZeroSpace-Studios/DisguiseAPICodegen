/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamPoolInfo struct for RenderstreamPoolInfo
type RenderstreamPoolInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	Machines *[]RenderstreamMachineInfo `json:"machines,omitempty"`
	Understudies *[]RenderstreamMachineInfo `json:"understudies,omitempty"`
}

// NewRenderstreamPoolInfo instantiates a new RenderstreamPoolInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamPoolInfo() *RenderstreamPoolInfo {
	this := RenderstreamPoolInfo{}
	return &this
}

// NewRenderstreamPoolInfoWithDefaults instantiates a new RenderstreamPoolInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamPoolInfoWithDefaults() *RenderstreamPoolInfo {
	this := RenderstreamPoolInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *RenderstreamPoolInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamPoolInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *RenderstreamPoolInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *RenderstreamPoolInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RenderstreamPoolInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamPoolInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RenderstreamPoolInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RenderstreamPoolInfo) SetName(v string) {
	o.Name = &v
}

// GetMachines returns the Machines field value if set, zero value otherwise.
func (o *RenderstreamPoolInfo) GetMachines() []RenderstreamMachineInfo {
	if o == nil || o.Machines == nil {
		var ret []RenderstreamMachineInfo
		return ret
	}
	return *o.Machines
}

// GetMachinesOk returns a tuple with the Machines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamPoolInfo) GetMachinesOk() (*[]RenderstreamMachineInfo, bool) {
	if o == nil || o.Machines == nil {
		return nil, false
	}
	return o.Machines, true
}

// HasMachines returns a boolean if a field has been set.
func (o *RenderstreamPoolInfo) HasMachines() bool {
	if o != nil && o.Machines != nil {
		return true
	}

	return false
}

// SetMachines gets a reference to the given []RenderstreamMachineInfo and assigns it to the Machines field.
func (o *RenderstreamPoolInfo) SetMachines(v []RenderstreamMachineInfo) {
	o.Machines = &v
}

// GetUnderstudies returns the Understudies field value if set, zero value otherwise.
func (o *RenderstreamPoolInfo) GetUnderstudies() []RenderstreamMachineInfo {
	if o == nil || o.Understudies == nil {
		var ret []RenderstreamMachineInfo
		return ret
	}
	return *o.Understudies
}

// GetUnderstudiesOk returns a tuple with the Understudies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamPoolInfo) GetUnderstudiesOk() (*[]RenderstreamMachineInfo, bool) {
	if o == nil || o.Understudies == nil {
		return nil, false
	}
	return o.Understudies, true
}

// HasUnderstudies returns a boolean if a field has been set.
func (o *RenderstreamPoolInfo) HasUnderstudies() bool {
	if o != nil && o.Understudies != nil {
		return true
	}

	return false
}

// SetUnderstudies gets a reference to the given []RenderstreamMachineInfo and assigns it to the Understudies field.
func (o *RenderstreamPoolInfo) SetUnderstudies(v []RenderstreamMachineInfo) {
	o.Understudies = &v
}

func (o RenderstreamPoolInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Machines != nil {
		toSerialize["machines"] = o.Machines
	}
	if o.Understudies != nil {
		toSerialize["understudies"] = o.Understudies
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamPoolInfo struct {
	value *RenderstreamPoolInfo
	isSet bool
}

func (v NullableRenderstreamPoolInfo) Get() *RenderstreamPoolInfo {
	return v.value
}

func (v *NullableRenderstreamPoolInfo) Set(val *RenderstreamPoolInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamPoolInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamPoolInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamPoolInfo(val *RenderstreamPoolInfo) *NullableRenderstreamPoolInfo {
	return &NullableRenderstreamPoolInfo{value: val, isSet: true}
}

func (v NullableRenderstreamPoolInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamPoolInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


