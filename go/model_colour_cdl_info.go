/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ColourCDLInfo struct for ColourCDLInfo
type ColourCDLInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	Slope *D3apiVec3Float `json:"slope,omitempty"`
	Offset *D3apiVec3Float `json:"offset,omitempty"`
	Power *D3apiVec3Float `json:"power,omitempty"`
	Saturation *float32 `json:"saturation,omitempty"`
}

// NewColourCDLInfo instantiates a new ColourCDLInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColourCDLInfo() *ColourCDLInfo {
	this := ColourCDLInfo{}
	return &this
}

// NewColourCDLInfoWithDefaults instantiates a new ColourCDLInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColourCDLInfoWithDefaults() *ColourCDLInfo {
	this := ColourCDLInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ColourCDLInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColourCDLInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *ColourCDLInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *ColourCDLInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ColourCDLInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColourCDLInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ColourCDLInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ColourCDLInfo) SetName(v string) {
	o.Name = &v
}

// GetSlope returns the Slope field value if set, zero value otherwise.
func (o *ColourCDLInfo) GetSlope() D3apiVec3Float {
	if o == nil || o.Slope == nil {
		var ret D3apiVec3Float
		return ret
	}
	return *o.Slope
}

// GetSlopeOk returns a tuple with the Slope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColourCDLInfo) GetSlopeOk() (*D3apiVec3Float, bool) {
	if o == nil || o.Slope == nil {
		return nil, false
	}
	return o.Slope, true
}

// HasSlope returns a boolean if a field has been set.
func (o *ColourCDLInfo) HasSlope() bool {
	if o != nil && o.Slope != nil {
		return true
	}

	return false
}

// SetSlope gets a reference to the given D3apiVec3Float and assigns it to the Slope field.
func (o *ColourCDLInfo) SetSlope(v D3apiVec3Float) {
	o.Slope = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ColourCDLInfo) GetOffset() D3apiVec3Float {
	if o == nil || o.Offset == nil {
		var ret D3apiVec3Float
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColourCDLInfo) GetOffsetOk() (*D3apiVec3Float, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ColourCDLInfo) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given D3apiVec3Float and assigns it to the Offset field.
func (o *ColourCDLInfo) SetOffset(v D3apiVec3Float) {
	o.Offset = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *ColourCDLInfo) GetPower() D3apiVec3Float {
	if o == nil || o.Power == nil {
		var ret D3apiVec3Float
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColourCDLInfo) GetPowerOk() (*D3apiVec3Float, bool) {
	if o == nil || o.Power == nil {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *ColourCDLInfo) HasPower() bool {
	if o != nil && o.Power != nil {
		return true
	}

	return false
}

// SetPower gets a reference to the given D3apiVec3Float and assigns it to the Power field.
func (o *ColourCDLInfo) SetPower(v D3apiVec3Float) {
	o.Power = &v
}

// GetSaturation returns the Saturation field value if set, zero value otherwise.
func (o *ColourCDLInfo) GetSaturation() float32 {
	if o == nil || o.Saturation == nil {
		var ret float32
		return ret
	}
	return *o.Saturation
}

// GetSaturationOk returns a tuple with the Saturation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColourCDLInfo) GetSaturationOk() (*float32, bool) {
	if o == nil || o.Saturation == nil {
		return nil, false
	}
	return o.Saturation, true
}

// HasSaturation returns a boolean if a field has been set.
func (o *ColourCDLInfo) HasSaturation() bool {
	if o != nil && o.Saturation != nil {
		return true
	}

	return false
}

// SetSaturation gets a reference to the given float32 and assigns it to the Saturation field.
func (o *ColourCDLInfo) SetSaturation(v float32) {
	o.Saturation = &v
}

func (o ColourCDLInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Slope != nil {
		toSerialize["slope"] = o.Slope
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Power != nil {
		toSerialize["power"] = o.Power
	}
	if o.Saturation != nil {
		toSerialize["saturation"] = o.Saturation
	}
	return json.Marshal(toSerialize)
}

type NullableColourCDLInfo struct {
	value *ColourCDLInfo
	isSet bool
}

func (v NullableColourCDLInfo) Get() *ColourCDLInfo {
	return v.value
}

func (v *NullableColourCDLInfo) Set(val *ColourCDLInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableColourCDLInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableColourCDLInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColourCDLInfo(val *ColourCDLInfo) *NullableColourCDLInfo {
	return &NullableColourCDLInfo{value: val, isSet: true}
}

func (v NullableColourCDLInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColourCDLInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


