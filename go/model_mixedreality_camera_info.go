/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedrealityCameraInfo struct for MixedrealityCameraInfo
type MixedrealityCameraInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	SpatialCalibration *MixedrealitySpatialCalibrationInfo `json:"spatialCalibration,omitempty"`
}

// NewMixedrealityCameraInfo instantiates a new MixedrealityCameraInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedrealityCameraInfo() *MixedrealityCameraInfo {
	this := MixedrealityCameraInfo{}
	return &this
}

// NewMixedrealityCameraInfoWithDefaults instantiates a new MixedrealityCameraInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedrealityCameraInfoWithDefaults() *MixedrealityCameraInfo {
	this := MixedrealityCameraInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *MixedrealityCameraInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityCameraInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *MixedrealityCameraInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *MixedrealityCameraInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MixedrealityCameraInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityCameraInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MixedrealityCameraInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MixedrealityCameraInfo) SetName(v string) {
	o.Name = &v
}

// GetSpatialCalibration returns the SpatialCalibration field value if set, zero value otherwise.
func (o *MixedrealityCameraInfo) GetSpatialCalibration() MixedrealitySpatialCalibrationInfo {
	if o == nil || o.SpatialCalibration == nil {
		var ret MixedrealitySpatialCalibrationInfo
		return ret
	}
	return *o.SpatialCalibration
}

// GetSpatialCalibrationOk returns a tuple with the SpatialCalibration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedrealityCameraInfo) GetSpatialCalibrationOk() (*MixedrealitySpatialCalibrationInfo, bool) {
	if o == nil || o.SpatialCalibration == nil {
		return nil, false
	}
	return o.SpatialCalibration, true
}

// HasSpatialCalibration returns a boolean if a field has been set.
func (o *MixedrealityCameraInfo) HasSpatialCalibration() bool {
	if o != nil && o.SpatialCalibration != nil {
		return true
	}

	return false
}

// SetSpatialCalibration gets a reference to the given MixedrealitySpatialCalibrationInfo and assigns it to the SpatialCalibration field.
func (o *MixedrealityCameraInfo) SetSpatialCalibration(v MixedrealitySpatialCalibrationInfo) {
	o.SpatialCalibration = &v
}

func (o MixedrealityCameraInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SpatialCalibration != nil {
		toSerialize["spatialCalibration"] = o.SpatialCalibration
	}
	return json.Marshal(toSerialize)
}

type NullableMixedrealityCameraInfo struct {
	value *MixedrealityCameraInfo
	isSet bool
}

func (v NullableMixedrealityCameraInfo) Get() *MixedrealityCameraInfo {
	return v.value
}

func (v *NullableMixedrealityCameraInfo) Set(val *MixedrealityCameraInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedrealityCameraInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedrealityCameraInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedrealityCameraInfo(val *MixedrealityCameraInfo) *NullableMixedrealityCameraInfo {
	return &NullableMixedrealityCameraInfo{value: val, isSet: true}
}

func (v NullableMixedrealityCameraInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedrealityCameraInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


