/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamStreamInfo struct for RenderstreamStreamInfo
type RenderstreamStreamInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	SourceMachine *string `json:"sourceMachine,omitempty"`
	ReceiverMachine *string `json:"receiverMachine,omitempty"`
	Status *RenderstreamStreamStatus `json:"status,omitempty"`
	StatusString *string `json:"statusString,omitempty"`
}

// NewRenderstreamStreamInfo instantiates a new RenderstreamStreamInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamStreamInfo() *RenderstreamStreamInfo {
	this := RenderstreamStreamInfo{}
	return &this
}

// NewRenderstreamStreamInfoWithDefaults instantiates a new RenderstreamStreamInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamStreamInfoWithDefaults() *RenderstreamStreamInfo {
	this := RenderstreamStreamInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *RenderstreamStreamInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RenderstreamStreamInfo) SetName(v string) {
	o.Name = &v
}

// GetSourceMachine returns the SourceMachine field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetSourceMachine() string {
	if o == nil || o.SourceMachine == nil {
		var ret string
		return ret
	}
	return *o.SourceMachine
}

// GetSourceMachineOk returns a tuple with the SourceMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetSourceMachineOk() (*string, bool) {
	if o == nil || o.SourceMachine == nil {
		return nil, false
	}
	return o.SourceMachine, true
}

// HasSourceMachine returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasSourceMachine() bool {
	if o != nil && o.SourceMachine != nil {
		return true
	}

	return false
}

// SetSourceMachine gets a reference to the given string and assigns it to the SourceMachine field.
func (o *RenderstreamStreamInfo) SetSourceMachine(v string) {
	o.SourceMachine = &v
}

// GetReceiverMachine returns the ReceiverMachine field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetReceiverMachine() string {
	if o == nil || o.ReceiverMachine == nil {
		var ret string
		return ret
	}
	return *o.ReceiverMachine
}

// GetReceiverMachineOk returns a tuple with the ReceiverMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetReceiverMachineOk() (*string, bool) {
	if o == nil || o.ReceiverMachine == nil {
		return nil, false
	}
	return o.ReceiverMachine, true
}

// HasReceiverMachine returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasReceiverMachine() bool {
	if o != nil && o.ReceiverMachine != nil {
		return true
	}

	return false
}

// SetReceiverMachine gets a reference to the given string and assigns it to the ReceiverMachine field.
func (o *RenderstreamStreamInfo) SetReceiverMachine(v string) {
	o.ReceiverMachine = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetStatus() RenderstreamStreamStatus {
	if o == nil || o.Status == nil {
		var ret RenderstreamStreamStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetStatusOk() (*RenderstreamStreamStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RenderstreamStreamStatus and assigns it to the Status field.
func (o *RenderstreamStreamInfo) SetStatus(v RenderstreamStreamStatus) {
	o.Status = &v
}

// GetStatusString returns the StatusString field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetStatusString() string {
	if o == nil || o.StatusString == nil {
		var ret string
		return ret
	}
	return *o.StatusString
}

// GetStatusStringOk returns a tuple with the StatusString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetStatusStringOk() (*string, bool) {
	if o == nil || o.StatusString == nil {
		return nil, false
	}
	return o.StatusString, true
}

// HasStatusString returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasStatusString() bool {
	if o != nil && o.StatusString != nil {
		return true
	}

	return false
}

// SetStatusString gets a reference to the given string and assigns it to the StatusString field.
func (o *RenderstreamStreamInfo) SetStatusString(v string) {
	o.StatusString = &v
}

func (o RenderstreamStreamInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SourceMachine != nil {
		toSerialize["sourceMachine"] = o.SourceMachine
	}
	if o.ReceiverMachine != nil {
		toSerialize["receiverMachine"] = o.ReceiverMachine
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusString != nil {
		toSerialize["statusString"] = o.StatusString
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamStreamInfo struct {
	value *RenderstreamStreamInfo
	isSet bool
}

func (v NullableRenderstreamStreamInfo) Get() *RenderstreamStreamInfo {
	return v.value
}

func (v *NullableRenderstreamStreamInfo) Set(val *RenderstreamStreamInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamStreamInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamStreamInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamStreamInfo(val *RenderstreamStreamInfo) *NullableRenderstreamStreamInfo {
	return &NullableRenderstreamStreamInfo{value: val, isSet: true}
}

func (v NullableRenderstreamStreamInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamStreamInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


