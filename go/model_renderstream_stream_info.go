/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamStreamInfo struct for RenderstreamStreamInfo
type RenderstreamStreamInfo struct {
	Name *string `json:"name,omitempty"`
	WorkloadID *string `json:"workloadID,omitempty"`
	MachineName *string `json:"machineName,omitempty"`
	Status *StreamInfoStreamStatus `json:"status,omitempty"`
	ReceivingLocally *bool `json:"receivingLocally,omitempty"`
	Clipping *RenderstreamClippingRegion `json:"clipping,omitempty"`
}

// NewRenderstreamStreamInfo instantiates a new RenderstreamStreamInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamStreamInfo() *RenderstreamStreamInfo {
	this := RenderstreamStreamInfo{}
	var status StreamInfoStreamStatus = NONE
	this.Status = &status
	return &this
}

// NewRenderstreamStreamInfoWithDefaults instantiates a new RenderstreamStreamInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamStreamInfoWithDefaults() *RenderstreamStreamInfo {
	this := RenderstreamStreamInfo{}
	var status StreamInfoStreamStatus = NONE
	this.Status = &status
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RenderstreamStreamInfo) SetName(v string) {
	o.Name = &v
}

// GetWorkloadID returns the WorkloadID field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetWorkloadID() string {
	if o == nil || o.WorkloadID == nil {
		var ret string
		return ret
	}
	return *o.WorkloadID
}

// GetWorkloadIDOk returns a tuple with the WorkloadID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetWorkloadIDOk() (*string, bool) {
	if o == nil || o.WorkloadID == nil {
		return nil, false
	}
	return o.WorkloadID, true
}

// HasWorkloadID returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasWorkloadID() bool {
	if o != nil && o.WorkloadID != nil {
		return true
	}

	return false
}

// SetWorkloadID gets a reference to the given string and assigns it to the WorkloadID field.
func (o *RenderstreamStreamInfo) SetWorkloadID(v string) {
	o.WorkloadID = &v
}

// GetMachineName returns the MachineName field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetMachineName() string {
	if o == nil || o.MachineName == nil {
		var ret string
		return ret
	}
	return *o.MachineName
}

// GetMachineNameOk returns a tuple with the MachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetMachineNameOk() (*string, bool) {
	if o == nil || o.MachineName == nil {
		return nil, false
	}
	return o.MachineName, true
}

// HasMachineName returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasMachineName() bool {
	if o != nil && o.MachineName != nil {
		return true
	}

	return false
}

// SetMachineName gets a reference to the given string and assigns it to the MachineName field.
func (o *RenderstreamStreamInfo) SetMachineName(v string) {
	o.MachineName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetStatus() StreamInfoStreamStatus {
	if o == nil || o.Status == nil {
		var ret StreamInfoStreamStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetStatusOk() (*StreamInfoStreamStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StreamInfoStreamStatus and assigns it to the Status field.
func (o *RenderstreamStreamInfo) SetStatus(v StreamInfoStreamStatus) {
	o.Status = &v
}

// GetReceivingLocally returns the ReceivingLocally field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetReceivingLocally() bool {
	if o == nil || o.ReceivingLocally == nil {
		var ret bool
		return ret
	}
	return *o.ReceivingLocally
}

// GetReceivingLocallyOk returns a tuple with the ReceivingLocally field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetReceivingLocallyOk() (*bool, bool) {
	if o == nil || o.ReceivingLocally == nil {
		return nil, false
	}
	return o.ReceivingLocally, true
}

// HasReceivingLocally returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasReceivingLocally() bool {
	if o != nil && o.ReceivingLocally != nil {
		return true
	}

	return false
}

// SetReceivingLocally gets a reference to the given bool and assigns it to the ReceivingLocally field.
func (o *RenderstreamStreamInfo) SetReceivingLocally(v bool) {
	o.ReceivingLocally = &v
}

// GetClipping returns the Clipping field value if set, zero value otherwise.
func (o *RenderstreamStreamInfo) GetClipping() RenderstreamClippingRegion {
	if o == nil || o.Clipping == nil {
		var ret RenderstreamClippingRegion
		return ret
	}
	return *o.Clipping
}

// GetClippingOk returns a tuple with the Clipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamStreamInfo) GetClippingOk() (*RenderstreamClippingRegion, bool) {
	if o == nil || o.Clipping == nil {
		return nil, false
	}
	return o.Clipping, true
}

// HasClipping returns a boolean if a field has been set.
func (o *RenderstreamStreamInfo) HasClipping() bool {
	if o != nil && o.Clipping != nil {
		return true
	}

	return false
}

// SetClipping gets a reference to the given RenderstreamClippingRegion and assigns it to the Clipping field.
func (o *RenderstreamStreamInfo) SetClipping(v RenderstreamClippingRegion) {
	o.Clipping = &v
}

func (o RenderstreamStreamInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.WorkloadID != nil {
		toSerialize["workloadID"] = o.WorkloadID
	}
	if o.MachineName != nil {
		toSerialize["machineName"] = o.MachineName
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ReceivingLocally != nil {
		toSerialize["receivingLocally"] = o.ReceivingLocally
	}
	if o.Clipping != nil {
		toSerialize["clipping"] = o.Clipping
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamStreamInfo struct {
	value *RenderstreamStreamInfo
	isSet bool
}

func (v NullableRenderstreamStreamInfo) Get() *RenderstreamStreamInfo {
	return v.value
}

func (v *NullableRenderstreamStreamInfo) Set(val *RenderstreamStreamInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamStreamInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamStreamInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamStreamInfo(val *RenderstreamStreamInfo) *NullableRenderstreamStreamInfo {
	return &NullableRenderstreamStreamInfo{value: val, isSet: true}
}

func (v NullableRenderstreamStreamInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamStreamInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


