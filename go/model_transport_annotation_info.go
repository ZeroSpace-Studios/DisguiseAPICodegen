/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportAnnotationInfo struct for TransportAnnotationInfo
type TransportAnnotationInfo struct {
	Notes *[]TransportNoteInfo `json:"notes,omitempty"`
	Tags *[]TransportTagInfo `json:"tags,omitempty"`
	Sections *[]TransportSectionInfo `json:"sections,omitempty"`
}

// NewTransportAnnotationInfo instantiates a new TransportAnnotationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportAnnotationInfo() *TransportAnnotationInfo {
	this := TransportAnnotationInfo{}
	return &this
}

// NewTransportAnnotationInfoWithDefaults instantiates a new TransportAnnotationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportAnnotationInfoWithDefaults() *TransportAnnotationInfo {
	this := TransportAnnotationInfo{}
	return &this
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TransportAnnotationInfo) GetNotes() []TransportNoteInfo {
	if o == nil || o.Notes == nil {
		var ret []TransportNoteInfo
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportAnnotationInfo) GetNotesOk() (*[]TransportNoteInfo, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TransportAnnotationInfo) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []TransportNoteInfo and assigns it to the Notes field.
func (o *TransportAnnotationInfo) SetNotes(v []TransportNoteInfo) {
	o.Notes = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TransportAnnotationInfo) GetTags() []TransportTagInfo {
	if o == nil || o.Tags == nil {
		var ret []TransportTagInfo
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportAnnotationInfo) GetTagsOk() (*[]TransportTagInfo, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TransportAnnotationInfo) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TransportTagInfo and assigns it to the Tags field.
func (o *TransportAnnotationInfo) SetTags(v []TransportTagInfo) {
	o.Tags = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *TransportAnnotationInfo) GetSections() []TransportSectionInfo {
	if o == nil || o.Sections == nil {
		var ret []TransportSectionInfo
		return ret
	}
	return *o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportAnnotationInfo) GetSectionsOk() (*[]TransportSectionInfo, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *TransportAnnotationInfo) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given []TransportSectionInfo and assigns it to the Sections field.
func (o *TransportAnnotationInfo) SetSections(v []TransportSectionInfo) {
	o.Sections = &v
}

func (o TransportAnnotationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}
	return json.Marshal(toSerialize)
}

type NullableTransportAnnotationInfo struct {
	value *TransportAnnotationInfo
	isSet bool
}

func (v NullableTransportAnnotationInfo) Get() *TransportAnnotationInfo {
	return v.value
}

func (v *NullableTransportAnnotationInfo) Set(val *TransportAnnotationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportAnnotationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportAnnotationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportAnnotationInfo(val *TransportAnnotationInfo) *NullableTransportAnnotationInfo {
	return &NullableTransportAnnotationInfo{value: val, isSet: true}
}

func (v NullableTransportAnnotationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportAnnotationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


