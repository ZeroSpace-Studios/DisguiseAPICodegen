/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportNoteInfo struct for TransportNoteInfo
type TransportNoteInfo struct {
	Time *float64 `json:"time,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewTransportNoteInfo instantiates a new TransportNoteInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportNoteInfo() *TransportNoteInfo {
	this := TransportNoteInfo{}
	return &this
}

// NewTransportNoteInfoWithDefaults instantiates a new TransportNoteInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportNoteInfoWithDefaults() *TransportNoteInfo {
	this := TransportNoteInfo{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TransportNoteInfo) GetTime() float64 {
	if o == nil || o.Time == nil {
		var ret float64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportNoteInfo) GetTimeOk() (*float64, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TransportNoteInfo) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float64 and assigns it to the Time field.
func (o *TransportNoteInfo) SetTime(v float64) {
	o.Time = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TransportNoteInfo) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportNoteInfo) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TransportNoteInfo) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TransportNoteInfo) SetText(v string) {
	o.Text = &v
}

func (o TransportNoteInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableTransportNoteInfo struct {
	value *TransportNoteInfo
	isSet bool
}

func (v NullableTransportNoteInfo) Get() *TransportNoteInfo {
	return v.value
}

func (v *NullableTransportNoteInfo) Set(val *TransportNoteInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportNoteInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportNoteInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportNoteInfo(val *TransportNoteInfo) *NullableTransportNoteInfo {
	return &NullableTransportNoteInfo{value: val, isSet: true}
}

func (v NullableTransportNoteInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportNoteInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


