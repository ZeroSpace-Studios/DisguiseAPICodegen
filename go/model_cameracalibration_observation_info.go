/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CameracalibrationObservationInfo struct for CameracalibrationObservationInfo
type CameracalibrationObservationInfo struct {
	Uid *string `json:"uid,omitempty"`
	Description *string `json:"description,omitempty"`
	TrackedPos *CameracalibrationFloat3 `json:"trackedPos,omitempty"`
	TrackedRot *CameracalibrationFloat3 `json:"trackedRot,omitempty"`
	TrackedZoom *float32 `json:"trackedZoom,omitempty"`
	TrackedFocus *float32 `json:"trackedFocus,omitempty"`
	IsEnabled *bool `json:"isEnabled,omitempty"`
	IsPrimary *bool `json:"isPrimary,omitempty"`
}

// NewCameracalibrationObservationInfo instantiates a new CameracalibrationObservationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCameracalibrationObservationInfo() *CameracalibrationObservationInfo {
	this := CameracalibrationObservationInfo{}
	return &this
}

// NewCameracalibrationObservationInfoWithDefaults instantiates a new CameracalibrationObservationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCameracalibrationObservationInfoWithDefaults() *CameracalibrationObservationInfo {
	this := CameracalibrationObservationInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *CameracalibrationObservationInfo) SetUid(v string) {
	o.Uid = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CameracalibrationObservationInfo) SetDescription(v string) {
	o.Description = &v
}

// GetTrackedPos returns the TrackedPos field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetTrackedPos() CameracalibrationFloat3 {
	if o == nil || o.TrackedPos == nil {
		var ret CameracalibrationFloat3
		return ret
	}
	return *o.TrackedPos
}

// GetTrackedPosOk returns a tuple with the TrackedPos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetTrackedPosOk() (*CameracalibrationFloat3, bool) {
	if o == nil || o.TrackedPos == nil {
		return nil, false
	}
	return o.TrackedPos, true
}

// HasTrackedPos returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasTrackedPos() bool {
	if o != nil && o.TrackedPos != nil {
		return true
	}

	return false
}

// SetTrackedPos gets a reference to the given CameracalibrationFloat3 and assigns it to the TrackedPos field.
func (o *CameracalibrationObservationInfo) SetTrackedPos(v CameracalibrationFloat3) {
	o.TrackedPos = &v
}

// GetTrackedRot returns the TrackedRot field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetTrackedRot() CameracalibrationFloat3 {
	if o == nil || o.TrackedRot == nil {
		var ret CameracalibrationFloat3
		return ret
	}
	return *o.TrackedRot
}

// GetTrackedRotOk returns a tuple with the TrackedRot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetTrackedRotOk() (*CameracalibrationFloat3, bool) {
	if o == nil || o.TrackedRot == nil {
		return nil, false
	}
	return o.TrackedRot, true
}

// HasTrackedRot returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasTrackedRot() bool {
	if o != nil && o.TrackedRot != nil {
		return true
	}

	return false
}

// SetTrackedRot gets a reference to the given CameracalibrationFloat3 and assigns it to the TrackedRot field.
func (o *CameracalibrationObservationInfo) SetTrackedRot(v CameracalibrationFloat3) {
	o.TrackedRot = &v
}

// GetTrackedZoom returns the TrackedZoom field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetTrackedZoom() float32 {
	if o == nil || o.TrackedZoom == nil {
		var ret float32
		return ret
	}
	return *o.TrackedZoom
}

// GetTrackedZoomOk returns a tuple with the TrackedZoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetTrackedZoomOk() (*float32, bool) {
	if o == nil || o.TrackedZoom == nil {
		return nil, false
	}
	return o.TrackedZoom, true
}

// HasTrackedZoom returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasTrackedZoom() bool {
	if o != nil && o.TrackedZoom != nil {
		return true
	}

	return false
}

// SetTrackedZoom gets a reference to the given float32 and assigns it to the TrackedZoom field.
func (o *CameracalibrationObservationInfo) SetTrackedZoom(v float32) {
	o.TrackedZoom = &v
}

// GetTrackedFocus returns the TrackedFocus field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetTrackedFocus() float32 {
	if o == nil || o.TrackedFocus == nil {
		var ret float32
		return ret
	}
	return *o.TrackedFocus
}

// GetTrackedFocusOk returns a tuple with the TrackedFocus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetTrackedFocusOk() (*float32, bool) {
	if o == nil || o.TrackedFocus == nil {
		return nil, false
	}
	return o.TrackedFocus, true
}

// HasTrackedFocus returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasTrackedFocus() bool {
	if o != nil && o.TrackedFocus != nil {
		return true
	}

	return false
}

// SetTrackedFocus gets a reference to the given float32 and assigns it to the TrackedFocus field.
func (o *CameracalibrationObservationInfo) SetTrackedFocus(v float32) {
	o.TrackedFocus = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetIsEnabledOk() (*bool, bool) {
	if o == nil || o.IsEnabled == nil {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *CameracalibrationObservationInfo) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsPrimary returns the IsPrimary field value if set, zero value otherwise.
func (o *CameracalibrationObservationInfo) GetIsPrimary() bool {
	if o == nil || o.IsPrimary == nil {
		var ret bool
		return ret
	}
	return *o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CameracalibrationObservationInfo) GetIsPrimaryOk() (*bool, bool) {
	if o == nil || o.IsPrimary == nil {
		return nil, false
	}
	return o.IsPrimary, true
}

// HasIsPrimary returns a boolean if a field has been set.
func (o *CameracalibrationObservationInfo) HasIsPrimary() bool {
	if o != nil && o.IsPrimary != nil {
		return true
	}

	return false
}

// SetIsPrimary gets a reference to the given bool and assigns it to the IsPrimary field.
func (o *CameracalibrationObservationInfo) SetIsPrimary(v bool) {
	o.IsPrimary = &v
}

func (o CameracalibrationObservationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TrackedPos != nil {
		toSerialize["trackedPos"] = o.TrackedPos
	}
	if o.TrackedRot != nil {
		toSerialize["trackedRot"] = o.TrackedRot
	}
	if o.TrackedZoom != nil {
		toSerialize["trackedZoom"] = o.TrackedZoom
	}
	if o.TrackedFocus != nil {
		toSerialize["trackedFocus"] = o.TrackedFocus
	}
	if o.IsEnabled != nil {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if o.IsPrimary != nil {
		toSerialize["isPrimary"] = o.IsPrimary
	}
	return json.Marshal(toSerialize)
}

type NullableCameracalibrationObservationInfo struct {
	value *CameracalibrationObservationInfo
	isSet bool
}

func (v NullableCameracalibrationObservationInfo) Get() *CameracalibrationObservationInfo {
	return v.value
}

func (v *NullableCameracalibrationObservationInfo) Set(val *CameracalibrationObservationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCameracalibrationObservationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCameracalibrationObservationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCameracalibrationObservationInfo(val *CameracalibrationObservationInfo) *NullableCameracalibrationObservationInfo {
	return &NullableCameracalibrationObservationInfo{value: val, isSet: true}
}

func (v NullableCameracalibrationObservationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCameracalibrationObservationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


