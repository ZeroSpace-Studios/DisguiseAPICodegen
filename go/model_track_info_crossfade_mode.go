/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TrackInfoCrossfadeMode the model 'TrackInfoCrossfadeMode'
type TrackInfoCrossfadeMode string

// List of TrackInfoCrossfadeMode
const (
	UNKNOWN TrackInfoCrossfadeMode = "Unknown"
	OFF TrackInfoCrossfadeMode = "Off"
	FADE TrackInfoCrossfadeMode = "Fade"
	TRACK_SECTION TrackInfoCrossfadeMode = "TrackSection"
)

// All allowed values of TrackInfoCrossfadeMode enum
var AllowedTrackInfoCrossfadeModeEnumValues = []TrackInfoCrossfadeMode{
	"Unknown",
	"Off",
	"Fade",
	"TrackSection",
}

func (v *TrackInfoCrossfadeMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackInfoCrossfadeMode(value)
	for _, existing := range AllowedTrackInfoCrossfadeModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackInfoCrossfadeMode", value)
}

// NewTrackInfoCrossfadeModeFromValue returns a pointer to a valid TrackInfoCrossfadeMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackInfoCrossfadeModeFromValue(v string) (*TrackInfoCrossfadeMode, error) {
	ev := TrackInfoCrossfadeMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackInfoCrossfadeMode: valid values are %v", v, AllowedTrackInfoCrossfadeModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackInfoCrossfadeMode) IsValid() bool {
	for _, existing := range AllowedTrackInfoCrossfadeModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrackInfoCrossfadeMode value
func (v TrackInfoCrossfadeMode) Ptr() *TrackInfoCrossfadeMode {
	return &v
}

type NullableTrackInfoCrossfadeMode struct {
	value *TrackInfoCrossfadeMode
	isSet bool
}

func (v NullableTrackInfoCrossfadeMode) Get() *TrackInfoCrossfadeMode {
	return v.value
}

func (v *NullableTrackInfoCrossfadeMode) Set(val *TrackInfoCrossfadeMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackInfoCrossfadeMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackInfoCrossfadeMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackInfoCrossfadeMode(val *TrackInfoCrossfadeMode) *NullableTrackInfoCrossfadeMode {
	return &NullableTrackInfoCrossfadeMode{value: val, isSet: true}
}

func (v NullableTrackInfoCrossfadeMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackInfoCrossfadeMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

