/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransportGoToFrameInfo struct for TransportGoToFrameInfo
type TransportGoToFrameInfo struct {
	Transport *D3apiLocator `json:"transport,omitempty"`
	Frame *int64 `json:"frame,omitempty"`
	Playmode *TransportAPIPlayMode `json:"playmode,omitempty"`
}

// NewTransportGoToFrameInfo instantiates a new TransportGoToFrameInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportGoToFrameInfo() *TransportGoToFrameInfo {
	this := TransportGoToFrameInfo{}
	var playmode TransportAPIPlayMode = NOT_SET
	this.Playmode = &playmode
	return &this
}

// NewTransportGoToFrameInfoWithDefaults instantiates a new TransportGoToFrameInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportGoToFrameInfoWithDefaults() *TransportGoToFrameInfo {
	this := TransportGoToFrameInfo{}
	var playmode TransportAPIPlayMode = NOT_SET
	this.Playmode = &playmode
	return &this
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *TransportGoToFrameInfo) GetTransport() D3apiLocator {
	if o == nil || o.Transport == nil {
		var ret D3apiLocator
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGoToFrameInfo) GetTransportOk() (*D3apiLocator, bool) {
	if o == nil || o.Transport == nil {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *TransportGoToFrameInfo) HasTransport() bool {
	if o != nil && o.Transport != nil {
		return true
	}

	return false
}

// SetTransport gets a reference to the given D3apiLocator and assigns it to the Transport field.
func (o *TransportGoToFrameInfo) SetTransport(v D3apiLocator) {
	o.Transport = &v
}

// GetFrame returns the Frame field value if set, zero value otherwise.
func (o *TransportGoToFrameInfo) GetFrame() int64 {
	if o == nil || o.Frame == nil {
		var ret int64
		return ret
	}
	return *o.Frame
}

// GetFrameOk returns a tuple with the Frame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGoToFrameInfo) GetFrameOk() (*int64, bool) {
	if o == nil || o.Frame == nil {
		return nil, false
	}
	return o.Frame, true
}

// HasFrame returns a boolean if a field has been set.
func (o *TransportGoToFrameInfo) HasFrame() bool {
	if o != nil && o.Frame != nil {
		return true
	}

	return false
}

// SetFrame gets a reference to the given int64 and assigns it to the Frame field.
func (o *TransportGoToFrameInfo) SetFrame(v int64) {
	o.Frame = &v
}

// GetPlaymode returns the Playmode field value if set, zero value otherwise.
func (o *TransportGoToFrameInfo) GetPlaymode() TransportAPIPlayMode {
	if o == nil || o.Playmode == nil {
		var ret TransportAPIPlayMode
		return ret
	}
	return *o.Playmode
}

// GetPlaymodeOk returns a tuple with the Playmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportGoToFrameInfo) GetPlaymodeOk() (*TransportAPIPlayMode, bool) {
	if o == nil || o.Playmode == nil {
		return nil, false
	}
	return o.Playmode, true
}

// HasPlaymode returns a boolean if a field has been set.
func (o *TransportGoToFrameInfo) HasPlaymode() bool {
	if o != nil && o.Playmode != nil {
		return true
	}

	return false
}

// SetPlaymode gets a reference to the given TransportAPIPlayMode and assigns it to the Playmode field.
func (o *TransportGoToFrameInfo) SetPlaymode(v TransportAPIPlayMode) {
	o.Playmode = &v
}

func (o TransportGoToFrameInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transport != nil {
		toSerialize["transport"] = o.Transport
	}
	if o.Frame != nil {
		toSerialize["frame"] = o.Frame
	}
	if o.Playmode != nil {
		toSerialize["playmode"] = o.Playmode
	}
	return json.Marshal(toSerialize)
}

type NullableTransportGoToFrameInfo struct {
	value *TransportGoToFrameInfo
	isSet bool
}

func (v NullableTransportGoToFrameInfo) Get() *TransportGoToFrameInfo {
	return v.value
}

func (v *NullableTransportGoToFrameInfo) Set(val *TransportGoToFrameInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportGoToFrameInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportGoToFrameInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportGoToFrameInfo(val *TransportGoToFrameInfo) *NullableTransportGoToFrameInfo {
	return &NullableTransportGoToFrameInfo{value: val, isSet: true}
}

func (v NullableTransportGoToFrameInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportGoToFrameInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


