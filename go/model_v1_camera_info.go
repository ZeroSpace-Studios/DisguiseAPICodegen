/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1CameraInfo struct for V1CameraInfo
type V1CameraInfo struct {
	Uid *string `json:"uid,omitempty"`
	Name *string `json:"name,omitempty"`
	Observations *[]V1ObservationInfo `json:"observations,omitempty"`
}

// NewV1CameraInfo instantiates a new V1CameraInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CameraInfo() *V1CameraInfo {
	this := V1CameraInfo{}
	return &this
}

// NewV1CameraInfoWithDefaults instantiates a new V1CameraInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CameraInfoWithDefaults() *V1CameraInfo {
	this := V1CameraInfo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *V1CameraInfo) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CameraInfo) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *V1CameraInfo) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *V1CameraInfo) SetUid(v string) {
	o.Uid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1CameraInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CameraInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1CameraInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1CameraInfo) SetName(v string) {
	o.Name = &v
}

// GetObservations returns the Observations field value if set, zero value otherwise.
func (o *V1CameraInfo) GetObservations() []V1ObservationInfo {
	if o == nil || o.Observations == nil {
		var ret []V1ObservationInfo
		return ret
	}
	return *o.Observations
}

// GetObservationsOk returns a tuple with the Observations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CameraInfo) GetObservationsOk() (*[]V1ObservationInfo, bool) {
	if o == nil || o.Observations == nil {
		return nil, false
	}
	return o.Observations, true
}

// HasObservations returns a boolean if a field has been set.
func (o *V1CameraInfo) HasObservations() bool {
	if o != nil && o.Observations != nil {
		return true
	}

	return false
}

// SetObservations gets a reference to the given []V1ObservationInfo and assigns it to the Observations field.
func (o *V1CameraInfo) SetObservations(v []V1ObservationInfo) {
	o.Observations = &v
}

func (o V1CameraInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Observations != nil {
		toSerialize["observations"] = o.Observations
	}
	return json.Marshal(toSerialize)
}

type NullableV1CameraInfo struct {
	value *V1CameraInfo
	isSet bool
}

func (v NullableV1CameraInfo) Get() *V1CameraInfo {
	return v.value
}

func (v *NullableV1CameraInfo) Set(val *V1CameraInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CameraInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CameraInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CameraInfo(val *V1CameraInfo) *NullableV1CameraInfo {
	return &NullableV1CameraInfo{value: val, isSet: true}
}

func (v NullableV1CameraInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CameraInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


