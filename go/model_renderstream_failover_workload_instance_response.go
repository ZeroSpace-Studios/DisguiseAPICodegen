/*
d3 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenderstreamFailoverWorkloadInstanceResponse struct for RenderstreamFailoverWorkloadInstanceResponse
type RenderstreamFailoverWorkloadInstanceResponse struct {
	FailoverMapping *RenderstreamFailoverInfo `json:"failoverMapping,omitempty"`
}

// NewRenderstreamFailoverWorkloadInstanceResponse instantiates a new RenderstreamFailoverWorkloadInstanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenderstreamFailoverWorkloadInstanceResponse() *RenderstreamFailoverWorkloadInstanceResponse {
	this := RenderstreamFailoverWorkloadInstanceResponse{}
	return &this
}

// NewRenderstreamFailoverWorkloadInstanceResponseWithDefaults instantiates a new RenderstreamFailoverWorkloadInstanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenderstreamFailoverWorkloadInstanceResponseWithDefaults() *RenderstreamFailoverWorkloadInstanceResponse {
	this := RenderstreamFailoverWorkloadInstanceResponse{}
	return &this
}

// GetFailoverMapping returns the FailoverMapping field value if set, zero value otherwise.
func (o *RenderstreamFailoverWorkloadInstanceResponse) GetFailoverMapping() RenderstreamFailoverInfo {
	if o == nil || o.FailoverMapping == nil {
		var ret RenderstreamFailoverInfo
		return ret
	}
	return *o.FailoverMapping
}

// GetFailoverMappingOk returns a tuple with the FailoverMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenderstreamFailoverWorkloadInstanceResponse) GetFailoverMappingOk() (*RenderstreamFailoverInfo, bool) {
	if o == nil || o.FailoverMapping == nil {
		return nil, false
	}
	return o.FailoverMapping, true
}

// HasFailoverMapping returns a boolean if a field has been set.
func (o *RenderstreamFailoverWorkloadInstanceResponse) HasFailoverMapping() bool {
	if o != nil && o.FailoverMapping != nil {
		return true
	}

	return false
}

// SetFailoverMapping gets a reference to the given RenderstreamFailoverInfo and assigns it to the FailoverMapping field.
func (o *RenderstreamFailoverWorkloadInstanceResponse) SetFailoverMapping(v RenderstreamFailoverInfo) {
	o.FailoverMapping = &v
}

func (o RenderstreamFailoverWorkloadInstanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailoverMapping != nil {
		toSerialize["failoverMapping"] = o.FailoverMapping
	}
	return json.Marshal(toSerialize)
}

type NullableRenderstreamFailoverWorkloadInstanceResponse struct {
	value *RenderstreamFailoverWorkloadInstanceResponse
	isSet bool
}

func (v NullableRenderstreamFailoverWorkloadInstanceResponse) Get() *RenderstreamFailoverWorkloadInstanceResponse {
	return v.value
}

func (v *NullableRenderstreamFailoverWorkloadInstanceResponse) Set(val *RenderstreamFailoverWorkloadInstanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRenderstreamFailoverWorkloadInstanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRenderstreamFailoverWorkloadInstanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenderstreamFailoverWorkloadInstanceResponse(val *RenderstreamFailoverWorkloadInstanceResponse) *NullableRenderstreamFailoverWorkloadInstanceResponse {
	return &NullableRenderstreamFailoverWorkloadInstanceResponse{value: val, isSet: true}
}

func (v NullableRenderstreamFailoverWorkloadInstanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenderstreamFailoverWorkloadInstanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


