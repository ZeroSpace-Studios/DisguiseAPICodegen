/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& Value)
{
	switch (Value)
	{
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Unknown:
		return TEXT("UNKNOWN");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Crashed:
		return TEXT("CRASHED");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Error:
		return TEXT("ERROR");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Stopping:
		return TEXT("STOPPING");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Stopped:
		return TEXT("STOPPED");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Launching:
		return TEXT("LAUNCHING");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Starting:
		return TEXT("STARTING");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Ready:
		return TEXT("READY");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Standby:
		return TEXT("STANDBY");
	case OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Running:
		return TEXT("RUNNING");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::EnumToString(const OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& Value)
{
	static TMap<FString, OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values> StringToEnum = { 
		{ TEXT("UNKNOWN"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Unknown },
		{ TEXT("CRASHED"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Crashed },
		{ TEXT("ERROR"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Error },
		{ TEXT("STOPPING"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Stopping },
		{ TEXT("STOPPED"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Stopped },
		{ TEXT("LAUNCHING"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Launching },
		{ TEXT("STARTING"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Starting },
		{ TEXT("READY"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Ready },
		{ TEXT("STANDBY"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Standby },
		{ TEXT("RUNNING"), OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values::Running }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::EnumFromString(const FString& EnumAsString, OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIWorkloadInstanceInfoWorkloadInstanceStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
