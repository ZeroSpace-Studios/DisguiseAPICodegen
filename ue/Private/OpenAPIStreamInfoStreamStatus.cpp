/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIStreamInfoStreamStatus.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIStreamInfoStreamStatus::Values& Value)
{
	switch (Value)
	{
	case OpenAPIStreamInfoStreamStatus::Values::None:
		return TEXT("None");
	case OpenAPIStreamInfoStreamStatus::Values::Good:
		return TEXT("Good");
	case OpenAPIStreamInfoStreamStatus::Values::DroppingFrames:
		return TEXT("DroppingFrames");
	case OpenAPIStreamInfoStreamStatus::Values::BadStream:
		return TEXT("BadStream");
	case OpenAPIStreamInfoStreamStatus::Values::NoStream:
		return TEXT("NoStream");
	case OpenAPIStreamInfoStreamStatus::Values::Offline:
		return TEXT("Offline");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIStreamInfoStreamStatus::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIStreamInfoStreamStatus::EnumToString(const OpenAPIStreamInfoStreamStatus::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIStreamInfoStreamStatus::Values& Value)
{
	static TMap<FString, OpenAPIStreamInfoStreamStatus::Values> StringToEnum = { 
		{ TEXT("None"), OpenAPIStreamInfoStreamStatus::Values::None },
		{ TEXT("Good"), OpenAPIStreamInfoStreamStatus::Values::Good },
		{ TEXT("DroppingFrames"), OpenAPIStreamInfoStreamStatus::Values::DroppingFrames },
		{ TEXT("BadStream"), OpenAPIStreamInfoStreamStatus::Values::BadStream },
		{ TEXT("NoStream"), OpenAPIStreamInfoStreamStatus::Values::NoStream },
		{ TEXT("Offline"), OpenAPIStreamInfoStreamStatus::Values::Offline }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIStreamInfoStreamStatus::EnumFromString(const FString& EnumAsString, OpenAPIStreamInfoStreamStatus::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIStreamInfoStreamStatus::Values& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIStreamInfoStreamStatus::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIStreamInfoStreamStatus::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIStreamInfoStreamStatus::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIStreamInfoStreamStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
