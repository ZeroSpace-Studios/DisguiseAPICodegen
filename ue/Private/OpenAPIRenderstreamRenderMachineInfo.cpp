/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRenderstreamRenderMachineInfo.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIRenderstreamRenderMachineInfo::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (StatusString.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("statusString")); WriteJsonValue(Writer, StatusString.GetValue());
	}
	if (Status.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status.GetValue());
	}
	if (Online.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("online")); WriteJsonValue(Writer, Online.GetValue());
	}
	if (LoadFactor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("loadFactor")); WriteJsonValue(Writer, LoadFactor.GetValue());
	}
	if (PreferredAdapter.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("preferredAdapter")); WriteJsonValue(Writer, PreferredAdapter.GetValue());
	}
	if (NetworkAdapters.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("networkAdapters")); WriteJsonValue(Writer, NetworkAdapters.GetValue());
	}
	if (Streams.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("streams")); WriteJsonValue(Writer, Streams.GetValue());
	}
	if (Assets.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("assets")); WriteJsonValue(Writer, Assets.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIRenderstreamRenderMachineInfo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("statusString"), StatusString);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("online"), Online);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("loadFactor"), LoadFactor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("preferredAdapter"), PreferredAdapter);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("networkAdapters"), NetworkAdapters);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("streams"), Streams);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assets"), Assets);

	return ParseSuccess;
}

}
