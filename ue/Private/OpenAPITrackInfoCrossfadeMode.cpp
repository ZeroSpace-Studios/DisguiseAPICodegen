/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITrackInfoCrossfadeMode.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPITrackInfoCrossfadeMode::Values& Value)
{
	switch (Value)
	{
	case OpenAPITrackInfoCrossfadeMode::Values::Unknown:
		return TEXT("Unknown");
	case OpenAPITrackInfoCrossfadeMode::Values::Off:
		return TEXT("Off");
	case OpenAPITrackInfoCrossfadeMode::Values::Fade:
		return TEXT("Fade");
	case OpenAPITrackInfoCrossfadeMode::Values::TrackSection:
		return TEXT("TrackSection");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPITrackInfoCrossfadeMode::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPITrackInfoCrossfadeMode::EnumToString(const OpenAPITrackInfoCrossfadeMode::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPITrackInfoCrossfadeMode::Values& Value)
{
	static TMap<FString, OpenAPITrackInfoCrossfadeMode::Values> StringToEnum = { 
		{ TEXT("Unknown"), OpenAPITrackInfoCrossfadeMode::Values::Unknown },
		{ TEXT("Off"), OpenAPITrackInfoCrossfadeMode::Values::Off },
		{ TEXT("Fade"), OpenAPITrackInfoCrossfadeMode::Values::Fade },
		{ TEXT("TrackSection"), OpenAPITrackInfoCrossfadeMode::Values::TrackSection }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPITrackInfoCrossfadeMode::EnumFromString(const FString& EnumAsString, OpenAPITrackInfoCrossfadeMode::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPITrackInfoCrossfadeMode::Values& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPITrackInfoCrossfadeMode::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPITrackInfoCrossfadeMode::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPITrackInfoCrossfadeMode::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPITrackInfoCrossfadeMode::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
