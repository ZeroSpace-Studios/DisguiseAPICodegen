/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICameracalibrationObservationInfo.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICameracalibrationObservationInfo::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Uid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("uid")); WriteJsonValue(Writer, Uid.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (TrackedPos.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trackedPos")); WriteJsonValue(Writer, TrackedPos.GetValue());
	}
	if (TrackedRot.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trackedRot")); WriteJsonValue(Writer, TrackedRot.GetValue());
	}
	if (TrackedZoom.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trackedZoom")); WriteJsonValue(Writer, TrackedZoom.GetValue());
	}
	if (TrackedFocus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("trackedFocus")); WriteJsonValue(Writer, TrackedFocus.GetValue());
	}
	if (IsEnabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("isEnabled")); WriteJsonValue(Writer, IsEnabled.GetValue());
	}
	if (IsPrimary.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("isPrimary")); WriteJsonValue(Writer, IsPrimary.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICameracalibrationObservationInfo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("uid"), Uid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("trackedPos"), TrackedPos);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("trackedRot"), TrackedRot);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("trackedZoom"), TrackedZoom);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("trackedFocus"), TrackedFocus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("isEnabled"), IsEnabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("isPrimary"), IsPrimary);

	return ParseSuccess;
}

}
