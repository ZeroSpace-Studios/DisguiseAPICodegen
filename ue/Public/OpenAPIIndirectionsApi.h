/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIIndirectionsApi
{
public:
	OpenAPIIndirectionsApi();
	~OpenAPIIndirectionsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class IndirectionsGetIndirectionRequest;
	class IndirectionsGetIndirectionResponse;
	class IndirectionsListIndirectionsRequest;
	class IndirectionsListIndirectionsResponse;
	class IndirectionsSetIndirectionsRequest;
	class IndirectionsSetIndirectionsResponse;
	class IndirectionsSetIndirections2Request;
	class IndirectionsSetIndirections2Response;
	
    DECLARE_DELEGATE_OneParam(FIndirectionsGetIndirectionDelegate, const IndirectionsGetIndirectionResponse&);
    DECLARE_DELEGATE_OneParam(FIndirectionsListIndirectionsDelegate, const IndirectionsListIndirectionsResponse&);
    DECLARE_DELEGATE_OneParam(FIndirectionsSetIndirectionsDelegate, const IndirectionsSetIndirectionsResponse&);
    DECLARE_DELEGATE_OneParam(FIndirectionsSetIndirections2Delegate, const IndirectionsSetIndirections2Response&);
    
    FHttpRequestPtr IndirectionsGetIndirection(const IndirectionsGetIndirectionRequest& Request, const FIndirectionsGetIndirectionDelegate& Delegate = FIndirectionsGetIndirectionDelegate()) const;
    FHttpRequestPtr IndirectionsListIndirections(const IndirectionsListIndirectionsRequest& Request, const FIndirectionsListIndirectionsDelegate& Delegate = FIndirectionsListIndirectionsDelegate()) const;
    FHttpRequestPtr IndirectionsSetIndirections(const IndirectionsSetIndirectionsRequest& Request, const FIndirectionsSetIndirectionsDelegate& Delegate = FIndirectionsSetIndirectionsDelegate()) const;
    FHttpRequestPtr IndirectionsSetIndirections2(const IndirectionsSetIndirections2Request& Request, const FIndirectionsSetIndirections2Delegate& Delegate = FIndirectionsSetIndirections2Delegate()) const;
    
private:
    void OnIndirectionsGetIndirectionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIndirectionsGetIndirectionDelegate Delegate) const;
    void OnIndirectionsListIndirectionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIndirectionsListIndirectionsDelegate Delegate) const;
    void OnIndirectionsSetIndirectionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIndirectionsSetIndirectionsDelegate Delegate) const;
    void OnIndirectionsSetIndirections2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIndirectionsSetIndirections2Delegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
