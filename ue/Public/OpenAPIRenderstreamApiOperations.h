/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRenderstreamApi.h"

#include "OpenAPIRenderstreamFailoverRenderMachineResponse.h"
#include "OpenAPIRenderstreamFailoverWorkloadInstanceResponse.h"
#include "OpenAPIRenderstreamGetClusterResponse.h"
#include "OpenAPIRenderstreamGetRenderMachineResponse.h"
#include "OpenAPIRenderstreamGetWorkloadInstanceResponse.h"
#include "OpenAPIRenderstreamGetWorkloadResponse.h"
#include "OpenAPIRenderstreamListClustersResponse.h"
#include "OpenAPIRenderstreamListRenderMachinesResponse.h"
#include "OpenAPIRenderstreamListWorkloadsResponse.h"

namespace OpenAPI
{

/* Fail over a single RenderstreamMachine, and all its workload instances

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverRenderMachineRequest : public Request
{
public:
    virtual ~RenderstreamFailoverRenderMachineRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Name of the render machine to fail over */
	FString Name;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverRenderMachineResponse : public Response
{
public:
    virtual ~RenderstreamFailoverRenderMachineResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamFailoverRenderMachineResponse Content;
};

/* Fail over a single RenderstreamMachine, and all its workload instances

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverRenderMachine2Request : public Request
{
public:
    virtual ~RenderstreamFailoverRenderMachine2Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Name of the render machine to fail over */
	FString Name;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverRenderMachine2Response : public Response
{
public:
    virtual ~RenderstreamFailoverRenderMachine2Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamFailoverRenderMachineResponse Content;
};

/* Fail over a single workload instance

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverWorkloadInstanceRequest : public Request
{
public:
    virtual ~RenderstreamFailoverWorkloadInstanceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* ID of the workload this instance belongs to */
	FString Workloadid;
	/* Index into the Workload's list of IDs */
	int64 Instanceindex = 0;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverWorkloadInstanceResponse : public Response
{
public:
    virtual ~RenderstreamFailoverWorkloadInstanceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamFailoverWorkloadInstanceResponse Content;
};

/* Fail over a single workload instance

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverWorkloadInstance2Request : public Request
{
public:
    virtual ~RenderstreamFailoverWorkloadInstance2Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* ID of the workload this instance belongs to */
	FString Workloadid;
	/* Index into the Workload's list of IDs */
	int64 Instanceindex = 0;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamFailoverWorkloadInstance2Response : public Response
{
public:
    virtual ~RenderstreamFailoverWorkloadInstance2Response() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamFailoverWorkloadInstanceResponse Content;
};

/* Get single ClusterPool

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetClusterRequest : public Request
{
public:
    virtual ~RenderstreamGetClusterRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString Name;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetClusterResponse : public Response
{
public:
    virtual ~RenderstreamGetClusterResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamGetClusterResponse Content;
};

/* Get single RenderstreamMachine

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetRenderMachineRequest : public Request
{
public:
    virtual ~RenderstreamGetRenderMachineRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString Name;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetRenderMachineResponse : public Response
{
public:
    virtual ~RenderstreamGetRenderMachineResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamGetRenderMachineResponse Content;
};

/* Get single Workload

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetWorkloadRequest : public Request
{
public:
    virtual ~RenderstreamGetWorkloadRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString Id;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetWorkloadResponse : public Response
{
public:
    virtual ~RenderstreamGetWorkloadResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamGetWorkloadResponse Content;
};

/* Get single Workload Instance

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetWorkloadInstanceRequest : public Request
{
public:
    virtual ~RenderstreamGetWorkloadInstanceRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* ID of the workload this instance belongs to */
	FString Workloadid;
	/* Index into the Workload's list of IDs */
	int64 Instanceindex = 0;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamGetWorkloadInstanceResponse : public Response
{
public:
    virtual ~RenderstreamGetWorkloadInstanceResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamGetWorkloadInstanceResponse Content;
};

/* List all ClusterPools

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamListClustersRequest : public Request
{
public:
    virtual ~RenderstreamListClustersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamListClustersResponse : public Response
{
public:
    virtual ~RenderstreamListClustersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamListClustersResponse Content;
};

/* List all RS machines (both current render machines and understudies)

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamListRenderMachinesRequest : public Request
{
public:
    virtual ~RenderstreamListRenderMachinesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamListRenderMachinesResponse : public Response
{
public:
    virtual ~RenderstreamListRenderMachinesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamListRenderMachinesResponse Content;
};

/* List all RS Workloads

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamListWorkloadsRequest : public Request
{
public:
    virtual ~RenderstreamListWorkloadsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamListWorkloadsResponse : public Response
{
public:
    virtual ~RenderstreamListWorkloadsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRenderstreamListWorkloadsResponse Content;
};

/* Start a workload

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamStartWorkloadRequest : public Request
{
public:
    virtual ~RenderstreamStartWorkloadRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString Id;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamStartWorkloadResponse : public Response
{
public:
    virtual ~RenderstreamStartWorkloadResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TSharedPtr<FJsonObject> Content;
};

/* Stop a workload

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamStopWorkloadRequest : public Request
{
public:
    virtual ~RenderstreamStopWorkloadRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString Id;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamStopWorkloadResponse : public Response
{
public:
    virtual ~RenderstreamStopWorkloadResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TSharedPtr<FJsonObject> Content;
};

/* Sync a workload

*/
class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamSyncWorkloadRequest : public Request
{
public:
    virtual ~RenderstreamSyncWorkloadRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString Id;
};

class OPENAPI_API OpenAPIRenderstreamApi::RenderstreamSyncWorkloadResponse : public Response
{
public:
    virtual ~RenderstreamSyncWorkloadResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TSharedPtr<FJsonObject> Content;
};

}
