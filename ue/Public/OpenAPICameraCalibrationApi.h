/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPICameraCalibrationApi
{
public:
	OpenAPICameraCalibrationApi();
	~OpenAPICameraCalibrationApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CameraCalibrationAddObservationRequest;
	class CameraCalibrationAddObservationResponse;
	class CameraCalibrationEnableObservationRequest;
	class CameraCalibrationEnableObservationResponse;
	class CameraCalibrationGetMRSetRequest;
	class CameraCalibrationGetMRSetResponse;
	class CameraCalibrationGetObservationProgressRequest;
	class CameraCalibrationGetObservationProgressResponse;
	class CameraCalibrationListMRSetsRequest;
	class CameraCalibrationListMRSetsResponse;
	class CameraCalibrationResetAllObservationsRequest;
	class CameraCalibrationResetAllObservationsResponse;
	
    DECLARE_DELEGATE_OneParam(FCameraCalibrationAddObservationDelegate, const CameraCalibrationAddObservationResponse&);
    DECLARE_DELEGATE_OneParam(FCameraCalibrationEnableObservationDelegate, const CameraCalibrationEnableObservationResponse&);
    DECLARE_DELEGATE_OneParam(FCameraCalibrationGetMRSetDelegate, const CameraCalibrationGetMRSetResponse&);
    DECLARE_DELEGATE_OneParam(FCameraCalibrationGetObservationProgressDelegate, const CameraCalibrationGetObservationProgressResponse&);
    DECLARE_DELEGATE_OneParam(FCameraCalibrationListMRSetsDelegate, const CameraCalibrationListMRSetsResponse&);
    DECLARE_DELEGATE_OneParam(FCameraCalibrationResetAllObservationsDelegate, const CameraCalibrationResetAllObservationsResponse&);
    
    FHttpRequestPtr CameraCalibrationAddObservation(const CameraCalibrationAddObservationRequest& Request, const FCameraCalibrationAddObservationDelegate& Delegate = FCameraCalibrationAddObservationDelegate()) const;
    FHttpRequestPtr CameraCalibrationEnableObservation(const CameraCalibrationEnableObservationRequest& Request, const FCameraCalibrationEnableObservationDelegate& Delegate = FCameraCalibrationEnableObservationDelegate()) const;
    FHttpRequestPtr CameraCalibrationGetMRSet(const CameraCalibrationGetMRSetRequest& Request, const FCameraCalibrationGetMRSetDelegate& Delegate = FCameraCalibrationGetMRSetDelegate()) const;
    FHttpRequestPtr CameraCalibrationGetObservationProgress(const CameraCalibrationGetObservationProgressRequest& Request, const FCameraCalibrationGetObservationProgressDelegate& Delegate = FCameraCalibrationGetObservationProgressDelegate()) const;
    FHttpRequestPtr CameraCalibrationListMRSets(const CameraCalibrationListMRSetsRequest& Request, const FCameraCalibrationListMRSetsDelegate& Delegate = FCameraCalibrationListMRSetsDelegate()) const;
    FHttpRequestPtr CameraCalibrationResetAllObservations(const CameraCalibrationResetAllObservationsRequest& Request, const FCameraCalibrationResetAllObservationsDelegate& Delegate = FCameraCalibrationResetAllObservationsDelegate()) const;
    
private:
    void OnCameraCalibrationAddObservationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCameraCalibrationAddObservationDelegate Delegate) const;
    void OnCameraCalibrationEnableObservationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCameraCalibrationEnableObservationDelegate Delegate) const;
    void OnCameraCalibrationGetMRSetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCameraCalibrationGetMRSetDelegate Delegate) const;
    void OnCameraCalibrationGetObservationProgressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCameraCalibrationGetObservationProgressDelegate Delegate) const;
    void OnCameraCalibrationListMRSetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCameraCalibrationListMRSetsDelegate Delegate) const;
    void OnCameraCalibrationResetAllObservationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCameraCalibrationResetAllObservationsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
