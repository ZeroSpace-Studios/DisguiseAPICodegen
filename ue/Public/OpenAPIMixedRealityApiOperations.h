/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIMixedRealityApi.h"

#include "OpenAPID3apiBoolResponse.h"
#include "OpenAPID3apiEmptyResponse.h"
#include "OpenAPIMixedrealityCaptureObservationRequest.h"
#include "OpenAPIMixedrealityDeleteAllObservationsRequest.h"
#include "OpenAPIMixedrealityDeleteObservationsRequest.h"
#include "OpenAPIMixedrealityEnableObservationsRequest.h"
#include "OpenAPIMixedrealityGetCamerasResponse.h"
#include "OpenAPIMixedrealityGetMRSetsResponse.h"
#include "OpenAPIMixedrealityListSpatialCalibrationsResponse.h"
#include "OpenAPIMixedrealitySelectCameraRequest.h"
#include "OpenAPIMixedrealitySelectSpatialCalibrationRequest.h"

namespace OpenAPI
{

/* Capture an observation on the given camera

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityCaptureObservationRequest : public Request
{
public:
    virtual ~MixedRealityCaptureObservationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIMixedrealityCaptureObservationRequest Body;
};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityCaptureObservationResponse : public Response
{
public:
    virtual ~MixedRealityCaptureObservationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiEmptyResponse Content;
};

/* Gets the current capture progress, only one capture can run at once

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityCaptureProgressRequest : public Request
{
public:
    virtual ~MixedRealityCaptureProgressRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityCaptureProgressResponse : public Response
{
public:
    virtual ~MixedRealityCaptureProgressResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiBoolResponse Content;
};

/* Delete all observations for a given spatial calibration

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityDeleteAllObservationsRequest : public Request
{
public:
    virtual ~MixedRealityDeleteAllObservationsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIMixedrealityDeleteAllObservationsRequest Body;
};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityDeleteAllObservationsResponse : public Response
{
public:
    virtual ~MixedRealityDeleteAllObservationsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiEmptyResponse Content;
};

/* Pass a list of observation identifiers to delete

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityDeleteObservationsRequest : public Request
{
public:
    virtual ~MixedRealityDeleteObservationsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIMixedrealityDeleteObservationsRequest Body;
};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityDeleteObservationsResponse : public Response
{
public:
    virtual ~MixedRealityDeleteObservationsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiEmptyResponse Content;
};

/* Pass a list of observation identifiers to enable/disable

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityEnableObservationsRequest : public Request
{
public:
    virtual ~MixedRealityEnableObservationsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIMixedrealityEnableObservationsRequest Body;
};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityEnableObservationsResponse : public Response
{
public:
    virtual ~MixedRealityEnableObservationsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiEmptyResponse Content;
};

/* Returns camera properties of cameras on the current stage

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityGetCamerasRequest : public Request
{
public:
    virtual ~MixedRealityGetCamerasRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityGetCamerasResponse : public Response
{
public:
    virtual ~MixedRealityGetCamerasResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIMixedrealityGetCamerasResponse Content;
};

/* Returns mixed reality sets on the current stage

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityGetMRSetsRequest : public Request
{
public:
    virtual ~MixedRealityGetMRSetsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityGetMRSetsResponse : public Response
{
public:
    virtual ~MixedRealityGetMRSetsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIMixedrealityGetMRSetsResponse Content;
};

/* Returns a list of all spatial calibrations

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityListSpatialCalibrationsRequest : public Request
{
public:
    virtual ~MixedRealityListSpatialCalibrationsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealityListSpatialCalibrationsResponse : public Response
{
public:
    virtual ~MixedRealityListSpatialCalibrationsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIMixedrealityListSpatialCalibrationsResponse Content;
};

/* Sets the current camera of an MR Set

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealitySelectCameraRequest : public Request
{
public:
    virtual ~MixedRealitySelectCameraRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIMixedrealitySelectCameraRequest Body;
};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealitySelectCameraResponse : public Response
{
public:
    virtual ~MixedRealitySelectCameraResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiEmptyResponse Content;
};

/* Sets the spatial calibration currently in use by a camera

*/
class OPENAPI_API OpenAPIMixedRealityApi::MixedRealitySelectSpatialCalibrationRequest : public Request
{
public:
    virtual ~MixedRealitySelectSpatialCalibrationRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	OpenAPIMixedrealitySelectSpatialCalibrationRequest Body;
};

class OPENAPI_API OpenAPIMixedRealityApi::MixedRealitySelectSpatialCalibrationResponse : public Response
{
public:
    virtual ~MixedRealitySelectSpatialCalibrationResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPID3apiEmptyResponse Content;
};

}
