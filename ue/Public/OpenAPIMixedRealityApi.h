/**
 * d3 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIMixedRealityApi
{
public:
	OpenAPIMixedRealityApi();
	~OpenAPIMixedRealityApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class MixedRealityCaptureObservationRequest;
	class MixedRealityCaptureObservationResponse;
	class MixedRealityCaptureProgressRequest;
	class MixedRealityCaptureProgressResponse;
	class MixedRealityDeleteAllObservationsRequest;
	class MixedRealityDeleteAllObservationsResponse;
	class MixedRealityDeleteObservationsRequest;
	class MixedRealityDeleteObservationsResponse;
	class MixedRealityEnableObservationsRequest;
	class MixedRealityEnableObservationsResponse;
	class MixedRealityGetCamerasRequest;
	class MixedRealityGetCamerasResponse;
	class MixedRealityGetMRSetsRequest;
	class MixedRealityGetMRSetsResponse;
	class MixedRealityListSpatialCalibrationsRequest;
	class MixedRealityListSpatialCalibrationsResponse;
	class MixedRealitySelectCameraRequest;
	class MixedRealitySelectCameraResponse;
	class MixedRealitySelectSpatialCalibrationRequest;
	class MixedRealitySelectSpatialCalibrationResponse;
	
    DECLARE_DELEGATE_OneParam(FMixedRealityCaptureObservationDelegate, const MixedRealityCaptureObservationResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityCaptureProgressDelegate, const MixedRealityCaptureProgressResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityDeleteAllObservationsDelegate, const MixedRealityDeleteAllObservationsResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityDeleteObservationsDelegate, const MixedRealityDeleteObservationsResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityEnableObservationsDelegate, const MixedRealityEnableObservationsResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityGetCamerasDelegate, const MixedRealityGetCamerasResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityGetMRSetsDelegate, const MixedRealityGetMRSetsResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealityListSpatialCalibrationsDelegate, const MixedRealityListSpatialCalibrationsResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealitySelectCameraDelegate, const MixedRealitySelectCameraResponse&);
    DECLARE_DELEGATE_OneParam(FMixedRealitySelectSpatialCalibrationDelegate, const MixedRealitySelectSpatialCalibrationResponse&);
    
    FHttpRequestPtr MixedRealityCaptureObservation(const MixedRealityCaptureObservationRequest& Request, const FMixedRealityCaptureObservationDelegate& Delegate = FMixedRealityCaptureObservationDelegate()) const;
    FHttpRequestPtr MixedRealityCaptureProgress(const MixedRealityCaptureProgressRequest& Request, const FMixedRealityCaptureProgressDelegate& Delegate = FMixedRealityCaptureProgressDelegate()) const;
    FHttpRequestPtr MixedRealityDeleteAllObservations(const MixedRealityDeleteAllObservationsRequest& Request, const FMixedRealityDeleteAllObservationsDelegate& Delegate = FMixedRealityDeleteAllObservationsDelegate()) const;
    FHttpRequestPtr MixedRealityDeleteObservations(const MixedRealityDeleteObservationsRequest& Request, const FMixedRealityDeleteObservationsDelegate& Delegate = FMixedRealityDeleteObservationsDelegate()) const;
    FHttpRequestPtr MixedRealityEnableObservations(const MixedRealityEnableObservationsRequest& Request, const FMixedRealityEnableObservationsDelegate& Delegate = FMixedRealityEnableObservationsDelegate()) const;
    FHttpRequestPtr MixedRealityGetCameras(const MixedRealityGetCamerasRequest& Request, const FMixedRealityGetCamerasDelegate& Delegate = FMixedRealityGetCamerasDelegate()) const;
    FHttpRequestPtr MixedRealityGetMRSets(const MixedRealityGetMRSetsRequest& Request, const FMixedRealityGetMRSetsDelegate& Delegate = FMixedRealityGetMRSetsDelegate()) const;
    FHttpRequestPtr MixedRealityListSpatialCalibrations(const MixedRealityListSpatialCalibrationsRequest& Request, const FMixedRealityListSpatialCalibrationsDelegate& Delegate = FMixedRealityListSpatialCalibrationsDelegate()) const;
    FHttpRequestPtr MixedRealitySelectCamera(const MixedRealitySelectCameraRequest& Request, const FMixedRealitySelectCameraDelegate& Delegate = FMixedRealitySelectCameraDelegate()) const;
    FHttpRequestPtr MixedRealitySelectSpatialCalibration(const MixedRealitySelectSpatialCalibrationRequest& Request, const FMixedRealitySelectSpatialCalibrationDelegate& Delegate = FMixedRealitySelectSpatialCalibrationDelegate()) const;
    
private:
    void OnMixedRealityCaptureObservationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityCaptureObservationDelegate Delegate) const;
    void OnMixedRealityCaptureProgressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityCaptureProgressDelegate Delegate) const;
    void OnMixedRealityDeleteAllObservationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityDeleteAllObservationsDelegate Delegate) const;
    void OnMixedRealityDeleteObservationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityDeleteObservationsDelegate Delegate) const;
    void OnMixedRealityEnableObservationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityEnableObservationsDelegate Delegate) const;
    void OnMixedRealityGetCamerasResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityGetCamerasDelegate Delegate) const;
    void OnMixedRealityGetMRSetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityGetMRSetsDelegate Delegate) const;
    void OnMixedRealityListSpatialCalibrationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealityListSpatialCalibrationsDelegate Delegate) const;
    void OnMixedRealitySelectCameraResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealitySelectCameraDelegate Delegate) const;
    void OnMixedRealitySelectSpatialCalibrationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMixedRealitySelectSpatialCalibrationDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
